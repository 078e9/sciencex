
MPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005108  08005108  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005108  08005108  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08005184  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005184  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ee  00000000  00000000  0002e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00030378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab3  00000000  00000000  00032008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001107e  00000000  00000000  0004aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008febb  00000000  00000000  0005bb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  000eba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005048 	.word	0x08005048

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005048 	.word	0x08005048

0800014c <DelayMicro>:
extern I2C_HandleTypeDef hi2c2;
char str1[100];
uint8_t portlcd; //������ ��� �������� ������ ����� ���������� ����������
//------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 8000154:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <DelayMicro+0x34>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <DelayMicro+0x38>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	0d5b      	lsrs	r3, r3, #21
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	fb02 f303 	mul.w	r3, r2, r3
 8000166:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000168:	bf00      	nop
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	1e5a      	subs	r2, r3, #1
 800016e:	607a      	str	r2, [r7, #4]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d1fa      	bne.n	800016a <DelayMicro+0x1e>
}
 8000174:	bf00      	nop
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	20000000 	.word	0x20000000
 8000184:	6b5fca6b 	.word	0x6b5fca6b

08000188 <LCD_WriteByteI2CLCD>:
//------------------------------------------------
void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af02      	add	r7, sp, #8
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 8000192:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <LCD_WriteByteI2CLCD+0x2c>)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2,(uint16_t) 0x4E,buf,1,1000);
 8000198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <LCD_WriteByteI2CLCD+0x2c>)
 80001a2:	214e      	movs	r1, #78	; 0x4e
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <LCD_WriteByteI2CLCD+0x30>)
 80001a6:	f002 fc3f 	bl	8002a28 <HAL_I2C_Master_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000090 	.word	0x20000090
 80001b8:	200000c4 	.word	0x200000c4

080001bc <sendhalfbyte>:
//------------------------------------------------
void sendhalfbyte(uint8_t c)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	011b      	lsls	r3, r3, #4
 80001ca:	71fb      	strb	r3, [r7, #7]
	e_set();//�������� ����� E
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <sendhalfbyte+0x64>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	f043 0304 	orr.w	r3, r3, #4
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4b12      	ldr	r3, [pc, #72]	; (8000220 <sendhalfbyte+0x64>)
 80001d8:	701a      	strb	r2, [r3, #0]
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <sendhalfbyte+0x64>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffd2 	bl	8000188 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f7ff ffb1 	bl	800014c <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 80001ea:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <sendhalfbyte+0x64>)
 80001ec:	781a      	ldrb	r2, [r3, #0]
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4313      	orrs	r3, r2
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffc7 	bl	8000188 <LCD_WriteByteI2CLCD>
	e_reset();//��������� ����� E
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <sendhalfbyte+0x64>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	f023 0304 	bic.w	r3, r3, #4
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <sendhalfbyte+0x64>)
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <sendhalfbyte+0x64>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f7ff ffbb 	bl	8000188 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 8000212:	2032      	movs	r0, #50	; 0x32
 8000214:	f7ff ff9a 	bl	800014c <DelayMicro>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000091 	.word	0x20000091

08000224 <sendbyte>:
//------------------------------------------------
void sendbyte(uint8_t c, uint8_t mode)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	4613      	mov	r3, r2
 8000232:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 8000234:	79bb      	ldrb	r3, [r7, #6]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10c      	bne.n	8000254 <sendbyte+0x30>
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <sendbyte+0x6c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	b2da      	uxtb	r2, r3
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <sendbyte+0x6c>)
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <sendbyte+0x6c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ff9b 	bl	8000188 <LCD_WriteByteI2CLCD>
 8000252:	e00b      	b.n	800026c <sendbyte+0x48>
	else rs_set();
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <sendbyte+0x6c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <sendbyte+0x6c>)
 8000260:	701a      	strb	r2, [r3, #0]
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <sendbyte+0x6c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff8e 	bl	8000188 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 800026c:	2300      	movs	r3, #0
 800026e:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	091b      	lsrs	r3, r3, #4
 8000274:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ff9f 	bl	80001bc <sendhalfbyte>
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff9b 	bl	80001bc <sendhalfbyte>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000091 	.word	0x20000091

08000294 <LCD_String>:
{
	sendbyte(ch,1);
}
//------------------------------------------------
void LCD_String(char* st)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80002a0:	e00a      	b.n	80002b8 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4413      	add	r3, r2
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2101      	movs	r1, #1
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffb9 	bl	8000224 <sendbyte>
		i++;
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	3301      	adds	r3, #1
 80002b6:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	4413      	add	r3, r2
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1ee      	bne.n	80002a2 <LCD_String+0xe>
	}
}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <LCD_SetPos>:
//------------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	switch(y)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d846      	bhi.n	8000374 <LCD_SetPos+0xa4>
 80002e6:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <LCD_SetPos+0x1c>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	080002fd 	.word	0x080002fd
 80002f0:	08000315 	.word	0x08000315
 80002f4:	08000335 	.word	0x08000335
 80002f8:	08000355 	.word	0x08000355
	{
		case 0:
			sendbyte(x|0x80,0);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff8c 	bl	8000224 <sendbyte>
			HAL_Delay(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f001 f96f 	bl	80015f0 <HAL_Delay>
			break;
 8000312:	e02f      	b.n	8000374 <LCD_SetPos+0xa4>
		case 1:
			sendbyte((0x40+x)|0x80,0);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	3340      	adds	r3, #64	; 0x40
 8000318:	b2db      	uxtb	r3, r3
 800031a:	b25b      	sxtb	r3, r3
 800031c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000320:	b25b      	sxtb	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff7c 	bl	8000224 <sendbyte>
			HAL_Delay(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f001 f95f 	bl	80015f0 <HAL_Delay>
			break;
 8000332:	e01f      	b.n	8000374 <LCD_SetPos+0xa4>
		case 2:
			sendbyte((0x14+x)|0x80,0);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3314      	adds	r3, #20
 8000338:	b2db      	uxtb	r3, r3
 800033a:	b25b      	sxtb	r3, r3
 800033c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000340:	b25b      	sxtb	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff6c 	bl	8000224 <sendbyte>
			HAL_Delay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f001 f94f 	bl	80015f0 <HAL_Delay>
			break;
 8000352:	e00f      	b.n	8000374 <LCD_SetPos+0xa4>
		case 3:
			sendbyte((0x54+x)|0x80,0);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	3354      	adds	r3, #84	; 0x54
 8000358:	b2db      	uxtb	r3, r3
 800035a:	b25b      	sxtb	r3, r3
 800035c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000360:	b25b      	sxtb	r3, r3
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff5c 	bl	8000224 <sendbyte>
			HAL_Delay(1);
 800036c:	2001      	movs	r0, #1
 800036e:	f001 f93f 	bl	80015f0 <HAL_Delay>
			break;
 8000372:	bf00      	nop
	}
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <LCD_ini>:
//------------------------------------------------
void LCD_ini(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8000380:	200f      	movs	r0, #15
 8000382:	f001 f935 	bl	80015f0 <HAL_Delay>
	sendhalfbyte(0x03);
 8000386:	2003      	movs	r0, #3
 8000388:	f7ff ff18 	bl	80001bc <sendhalfbyte>
	HAL_Delay(4);
 800038c:	2004      	movs	r0, #4
 800038e:	f001 f92f 	bl	80015f0 <HAL_Delay>
	sendhalfbyte(0x03);
 8000392:	2003      	movs	r0, #3
 8000394:	f7ff ff12 	bl	80001bc <sendhalfbyte>
	DelayMicro(100);
 8000398:	2064      	movs	r0, #100	; 0x64
 800039a:	f7ff fed7 	bl	800014c <DelayMicro>
	sendhalfbyte(0x03);
 800039e:	2003      	movs	r0, #3
 80003a0:	f7ff ff0c 	bl	80001bc <sendhalfbyte>
	HAL_Delay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f001 f923 	bl	80015f0 <HAL_Delay>
	sendhalfbyte(0x02);
 80003aa:	2002      	movs	r0, #2
 80003ac:	f7ff ff06 	bl	80001bc <sendhalfbyte>
	HAL_Delay(1);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f001 f91d 	bl	80015f0 <HAL_Delay>
	sendbyte(0x28,0);//����� 4 ���, 2 ����� (��� ������ �������� ������� ��� 4 �����, ����� 5�8	
 80003b6:	2100      	movs	r1, #0
 80003b8:	2028      	movs	r0, #40	; 0x28
 80003ba:	f7ff ff33 	bl	8000224 <sendbyte>
	HAL_Delay(1);
 80003be:	2001      	movs	r0, #1
 80003c0:	f001 f916 	bl	80015f0 <HAL_Delay>
	sendbyte(0x0C,0);//������� �������� (D=1), ������� ������� �� �����
 80003c4:	2100      	movs	r1, #0
 80003c6:	200c      	movs	r0, #12
 80003c8:	f7ff ff2c 	bl	8000224 <sendbyte>
	HAL_Delay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f001 f90f 	bl	80015f0 <HAL_Delay>
	sendbyte(0x01,0);//������ �����
 80003d2:	2100      	movs	r1, #0
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ff25 	bl	8000224 <sendbyte>
	HAL_Delay(2);
 80003da:	2002      	movs	r0, #2
 80003dc:	f001 f908 	bl	80015f0 <HAL_Delay>
	sendbyte(0x06,0);//����� �����
 80003e0:	2100      	movs	r1, #0
 80003e2:	2006      	movs	r0, #6
 80003e4:	f7ff ff1e 	bl	8000224 <sendbyte>
	HAL_Delay(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 f901 	bl	80015f0 <HAL_Delay>
	setled();//���������
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <LCD_ini+0xa8>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <LCD_ini+0xa8>)
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <LCD_ini+0xa8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff fec1 	bl	8000188 <LCD_WriteByteI2CLCD>
	setwrite();//������
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <LCD_ini+0xa8>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	f023 0302 	bic.w	r3, r3, #2
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <LCD_ini+0xa8>)
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <LCD_ini+0xa8>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff feb5 	bl	8000188 <LCD_WriteByteI2CLCD>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000091 	.word	0x20000091

08000428 <Loading>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Loading() {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++) {
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e074      	b.n	800051e <Loading+0xf6>
	  TM1637_display(0, 18);TM1637_display(1, 18);TM1637_display(2, 18);TM1637_display(3, 18);
 8000434:	2112      	movs	r1, #18
 8000436:	2000      	movs	r0, #0
 8000438:	f000 ffc8 	bl	80013cc <TM1637_display>
 800043c:	2112      	movs	r1, #18
 800043e:	2001      	movs	r0, #1
 8000440:	f000 ffc4 	bl	80013cc <TM1637_display>
 8000444:	2112      	movs	r1, #18
 8000446:	2002      	movs	r0, #2
 8000448:	f000 ffc0 	bl	80013cc <TM1637_display>
 800044c:	2112      	movs	r1, #18
 800044e:	2003      	movs	r0, #3
 8000450:	f000 ffbc 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 8000454:	2032      	movs	r0, #50	; 0x32
 8000456:	f001 f8cb 	bl	80015f0 <HAL_Delay>
	  TM1637_display(0, 19);TM1637_display(1, 19);TM1637_display(2, 19);TM1637_display(3, 19);
 800045a:	2113      	movs	r1, #19
 800045c:	2000      	movs	r0, #0
 800045e:	f000 ffb5 	bl	80013cc <TM1637_display>
 8000462:	2113      	movs	r1, #19
 8000464:	2001      	movs	r0, #1
 8000466:	f000 ffb1 	bl	80013cc <TM1637_display>
 800046a:	2113      	movs	r1, #19
 800046c:	2002      	movs	r0, #2
 800046e:	f000 ffad 	bl	80013cc <TM1637_display>
 8000472:	2113      	movs	r1, #19
 8000474:	2003      	movs	r0, #3
 8000476:	f000 ffa9 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f001 f8b8 	bl	80015f0 <HAL_Delay>
	  TM1637_display(0, 20);TM1637_display(1, 20);TM1637_display(2, 20);TM1637_display(3, 20);
 8000480:	2114      	movs	r1, #20
 8000482:	2000      	movs	r0, #0
 8000484:	f000 ffa2 	bl	80013cc <TM1637_display>
 8000488:	2114      	movs	r1, #20
 800048a:	2001      	movs	r0, #1
 800048c:	f000 ff9e 	bl	80013cc <TM1637_display>
 8000490:	2114      	movs	r1, #20
 8000492:	2002      	movs	r0, #2
 8000494:	f000 ff9a 	bl	80013cc <TM1637_display>
 8000498:	2114      	movs	r1, #20
 800049a:	2003      	movs	r0, #3
 800049c:	f000 ff96 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 80004a0:	2032      	movs	r0, #50	; 0x32
 80004a2:	f001 f8a5 	bl	80015f0 <HAL_Delay>
	  TM1637_display(0, 21);TM1637_display(1, 21);TM1637_display(2, 21);TM1637_display(3, 21);
 80004a6:	2115      	movs	r1, #21
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 ff8f 	bl	80013cc <TM1637_display>
 80004ae:	2115      	movs	r1, #21
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 ff8b 	bl	80013cc <TM1637_display>
 80004b6:	2115      	movs	r1, #21
 80004b8:	2002      	movs	r0, #2
 80004ba:	f000 ff87 	bl	80013cc <TM1637_display>
 80004be:	2115      	movs	r1, #21
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 ff83 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 80004c6:	2032      	movs	r0, #50	; 0x32
 80004c8:	f001 f892 	bl	80015f0 <HAL_Delay>
	  TM1637_display(0, 22);TM1637_display(1, 22);TM1637_display(2, 22);TM1637_display(3, 22);
 80004cc:	2116      	movs	r1, #22
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 ff7c 	bl	80013cc <TM1637_display>
 80004d4:	2116      	movs	r1, #22
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 ff78 	bl	80013cc <TM1637_display>
 80004dc:	2116      	movs	r1, #22
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 ff74 	bl	80013cc <TM1637_display>
 80004e4:	2116      	movs	r1, #22
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 ff70 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	; 0x32
 80004ee:	f001 f87f 	bl	80015f0 <HAL_Delay>
	  TM1637_display(0, 23);TM1637_display(1, 23);TM1637_display(2, 23);TM1637_display(3, 23);
 80004f2:	2117      	movs	r1, #23
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 ff69 	bl	80013cc <TM1637_display>
 80004fa:	2117      	movs	r1, #23
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 ff65 	bl	80013cc <TM1637_display>
 8000502:	2117      	movs	r1, #23
 8000504:	2002      	movs	r0, #2
 8000506:	f000 ff61 	bl	80013cc <TM1637_display>
 800050a:	2117      	movs	r1, #23
 800050c:	2003      	movs	r0, #3
 800050e:	f000 ff5d 	bl	80013cc <TM1637_display>
	  HAL_Delay(50);
 8000512:	2032      	movs	r0, #50	; 0x32
 8000514:	f001 f86c 	bl	80015f0 <HAL_Delay>
	for(int i = 0; i < 4; i++) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3301      	adds	r3, #1
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b03      	cmp	r3, #3
 8000522:	dd87      	ble.n	8000434 <Loading+0xc>
	}
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fffa 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f960 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fabe 	bl	8000abc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000540:	f000 f9b8 	bl	80008b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000544:	f000 fa22 	bl	800098c <MX_TIM4_Init>
  MX_I2C2_Init();
 8000548:	f000 f9f2 	bl	8000930 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800054c:	489f      	ldr	r0, [pc, #636]	; (80007cc <main+0x29c>)
 800054e:	f001 fd97 	bl	8002080 <HAL_ADCEx_Calibration_Start>
  TM1637_brightness(BRIGHTEST);
 8000552:	2007      	movs	r0, #7
 8000554:	f000 ffb2 	bl	80014bc <TM1637_brightness>

  LCD_ini();
 8000558:	f7ff ff10 	bl	800037c <LCD_ini>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	489c      	ldr	r0, [pc, #624]	; (80007d0 <main+0x2a0>)
 8000560:	f003 fba0 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000564:	2104      	movs	r1, #4
 8000566:	489a      	ldr	r0, [pc, #616]	; (80007d0 <main+0x2a0>)
 8000568:	f003 fb9c 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800056c:	2108      	movs	r1, #8
 800056e:	4898      	ldr	r0, [pc, #608]	; (80007d0 <main+0x2a0>)
 8000570:	f003 fb98 	bl	8003ca4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000574:	210c      	movs	r1, #12
 8000576:	4896      	ldr	r0, [pc, #600]	; (80007d0 <main+0x2a0>)
 8000578:	f003 fb94 	bl	8003ca4 <HAL_TIM_PWM_Start>


  Loading();
 800057c:	f7ff ff54 	bl	8000428 <Loading>
//	  HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
//	  adc = HAL_ADC_GetValue(&hadc1);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000580:	4892      	ldr	r0, [pc, #584]	; (80007cc <main+0x29c>)
 8000582:	f001 f931 	bl	80017e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000586:	2164      	movs	r1, #100	; 0x64
 8000588:	4890      	ldr	r0, [pc, #576]	; (80007cc <main+0x29c>)
 800058a:	f001 fa07 	bl	800199c <HAL_ADC_PollForConversion>
	  speed = HAL_ADC_GetValue(&hadc1);
 800058e:	488f      	ldr	r0, [pc, #572]	; (80007cc <main+0x29c>)
 8000590:	f001 fb0a 	bl	8001ba8 <HAL_ADC_GetValue>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b8e      	ldr	r3, [pc, #568]	; (80007d4 <main+0x2a4>)
 800059a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 800059c:	488b      	ldr	r0, [pc, #556]	; (80007cc <main+0x29c>)
 800059e:	f001 f9d1 	bl	8001944 <HAL_ADC_Stop>
	  TM1637_display_all(speed / 32);
 80005a2:	4b8c      	ldr	r3, [pc, #560]	; (80007d4 <main+0x2a4>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	095b      	lsrs	r3, r3, #5
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 ff42 	bl	8001434 <TM1637_display_all>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) {
 80005b0:	2101      	movs	r1, #1
 80005b2:	4889      	ldr	r0, [pc, #548]	; (80007d8 <main+0x2a8>)
 80005b4:	f002 f8ac 	bl	8002710 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d102      	bne.n	80005c4 <main+0x94>
		  MOVE_FORWARD();
 80005be:	f000 fb0f 	bl	8000be0 <MOVE_FORWARD>
 80005c2:	e00b      	b.n	80005dc <main+0xac>
	  }
	  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) {
 80005c4:	2102      	movs	r1, #2
 80005c6:	4884      	ldr	r0, [pc, #528]	; (80007d8 <main+0x2a8>)
 80005c8:	f002 f8a2 	bl	8002710 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d102      	bne.n	80005d8 <main+0xa8>
		  MOVE_BACK();
 80005d2:	f000 fb1f 	bl	8000c14 <MOVE_BACK>
 80005d6:	e001      	b.n	80005dc <main+0xac>
	  }
	  else {
		  STOP();
 80005d8:	f000 fb36 	bl	8000c48 <STOP>
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 80005dc:	2104      	movs	r1, #4
 80005de:	487f      	ldr	r0, [pc, #508]	; (80007dc <main+0x2ac>)
 80005e0:	f002 f896 	bl	8002710 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d12a      	bne.n	8000640 <main+0x110>
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET) {
 80005ea:	2120      	movs	r1, #32
 80005ec:	487a      	ldr	r0, [pc, #488]	; (80007d8 <main+0x2a8>)
 80005ee:	f002 f88f 	bl	8002710 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d110      	bne.n	800061a <main+0xea>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	4876      	ldr	r0, [pc, #472]	; (80007d8 <main+0x2a8>)
 80005fe:	f002 f89e 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 3);
 8000602:	2103      	movs	r1, #3
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fe63 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "STOP");
 800060a:	4975      	ldr	r1, [pc, #468]	; (80007e0 <main+0x2b0>)
 800060c:	4875      	ldr	r0, [pc, #468]	; (80007e4 <main+0x2b4>)
 800060e:	f004 f8a1 	bl	8004754 <siprintf>
			  LCD_String(str);
 8000612:	4874      	ldr	r0, [pc, #464]	; (80007e4 <main+0x2b4>)
 8000614:	f7ff fe3e 	bl	8000294 <LCD_String>
 8000618:	e00f      	b.n	800063a <main+0x10a>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	486e      	ldr	r0, [pc, #440]	; (80007d8 <main+0x2a8>)
 8000620:	f002 f88d 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 3);
 8000624:	2103      	movs	r1, #3
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fe52 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "     ");
 800062c:	496e      	ldr	r1, [pc, #440]	; (80007e8 <main+0x2b8>)
 800062e:	486d      	ldr	r0, [pc, #436]	; (80007e4 <main+0x2b4>)
 8000630:	f004 f890 	bl	8004754 <siprintf>
			  LCD_String(str);
 8000634:	486b      	ldr	r0, [pc, #428]	; (80007e4 <main+0x2b4>)
 8000636:	f7ff fe2d 	bl	8000294 <LCD_String>
		  }
		  HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 ffd8 	bl	80015f0 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4866      	ldr	r0, [pc, #408]	; (80007dc <main+0x2ac>)
 8000644:	f002 f864 	bl	8002710 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d12d      	bne.n	80006aa <main+0x17a>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET) {
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	4862      	ldr	r0, [pc, #392]	; (80007dc <main+0x2ac>)
 8000654:	f002 f85c 	bl	8002710 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d111      	bne.n	8000682 <main+0x152>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	485d      	ldr	r0, [pc, #372]	; (80007dc <main+0x2ac>)
 8000666:	f002 f86a 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 0);
 800066a:	2100      	movs	r1, #0
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fe2f 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "ABS");
 8000672:	495e      	ldr	r1, [pc, #376]	; (80007ec <main+0x2bc>)
 8000674:	485b      	ldr	r0, [pc, #364]	; (80007e4 <main+0x2b4>)
 8000676:	f004 f86d 	bl	8004754 <siprintf>
			  LCD_String(str);
 800067a:	485a      	ldr	r0, [pc, #360]	; (80007e4 <main+0x2b4>)
 800067c:	f7ff fe0a 	bl	8000294 <LCD_String>
 8000680:	e010      	b.n	80006a4 <main+0x174>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4854      	ldr	r0, [pc, #336]	; (80007dc <main+0x2ac>)
 800068a:	f002 f858 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 0);
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe1d 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "     ");
 8000696:	4954      	ldr	r1, [pc, #336]	; (80007e8 <main+0x2b8>)
 8000698:	4852      	ldr	r0, [pc, #328]	; (80007e4 <main+0x2b4>)
 800069a:	f004 f85b 	bl	8004754 <siprintf>
			  LCD_String(str);
 800069e:	4851      	ldr	r0, [pc, #324]	; (80007e4 <main+0x2b4>)
 80006a0:	f7ff fdf8 	bl	8000294 <LCD_String>
		  }
		  HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 ffa3 	bl	80015f0 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	484b      	ldr	r0, [pc, #300]	; (80007dc <main+0x2ac>)
 80006ae:	f002 f82f 	bl	8002710 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d12d      	bne.n	8000714 <main+0x1e4>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
 80006b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006bc:	4847      	ldr	r0, [pc, #284]	; (80007dc <main+0x2ac>)
 80006be:	f002 f827 	bl	8002710 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d111      	bne.n	80006ec <main+0x1bc>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ce:	4843      	ldr	r0, [pc, #268]	; (80007dc <main+0x2ac>)
 80006d0:	f002 f835 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 2);
 80006d4:	2102      	movs	r1, #2
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fdfa 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "=D");
 80006dc:	4944      	ldr	r1, [pc, #272]	; (80007f0 <main+0x2c0>)
 80006de:	4841      	ldr	r0, [pc, #260]	; (80007e4 <main+0x2b4>)
 80006e0:	f004 f838 	bl	8004754 <siprintf>
			  LCD_String(str);
 80006e4:	483f      	ldr	r0, [pc, #252]	; (80007e4 <main+0x2b4>)
 80006e6:	f7ff fdd5 	bl	8000294 <LCD_String>
 80006ea:	e010      	b.n	800070e <main+0x1de>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	483a      	ldr	r0, [pc, #232]	; (80007dc <main+0x2ac>)
 80006f4:	f002 f823 	bl	800273e <HAL_GPIO_WritePin>
			  LCD_SetPos(0, 2);
 80006f8:	2102      	movs	r1, #2
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fde8 	bl	80002d0 <LCD_SetPos>
			  sprintf(str, "     ");
 8000700:	4939      	ldr	r1, [pc, #228]	; (80007e8 <main+0x2b8>)
 8000702:	4838      	ldr	r0, [pc, #224]	; (80007e4 <main+0x2b4>)
 8000704:	f004 f826 	bl	8004754 <siprintf>
			  LCD_String(str);
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <main+0x2b4>)
 800070a:	f7ff fdc3 	bl	8000294 <LCD_String>
		  }
		  HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 ff6e 	bl	80015f0 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 8000714:	2108      	movs	r1, #8
 8000716:	4831      	ldr	r0, [pc, #196]	; (80007dc <main+0x2ac>)
 8000718:	f001 fffa 	bl	8002710 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11b      	bne.n	800075a <main+0x22a>
		  LCD_SetPos(0, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fdd3 	bl	80002d0 <LCD_SetPos>
		  sprintf(str, "<!>");
 800072a:	4932      	ldr	r1, [pc, #200]	; (80007f4 <main+0x2c4>)
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <main+0x2b4>)
 800072e:	f004 f811 	bl	8004754 <siprintf>
		  LCD_String(str);
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <main+0x2b4>)
 8000734:	f7ff fdae 	bl	8000294 <LCD_String>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000738:	2110      	movs	r1, #16
 800073a:	4827      	ldr	r0, [pc, #156]	; (80007d8 <main+0x2a8>)
 800073c:	f002 f817 	bl	800276e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <main+0x2ac>)
 8000746:	f002 f812 	bl	800276e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <main+0x2ac>)
 8000750:	f002 f80d 	bl	800276e <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000754:	20c8      	movs	r0, #200	; 0xc8
 8000756:	f000 ff4b 	bl	80015f0 <HAL_Delay>
	  }

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 800075a:	2110      	movs	r1, #16
 800075c:	481f      	ldr	r0, [pc, #124]	; (80007dc <main+0x2ac>)
 800075e:	f001 ffd7 	bl	8002710 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d107      	bne.n	8000778 <main+0x248>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000768:	2110      	movs	r1, #16
 800076a:	481b      	ldr	r0, [pc, #108]	; (80007d8 <main+0x2a8>)
 800076c:	f001 ffff 	bl	800276e <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000770:	20c8      	movs	r0, #200	; 0xc8
 8000772:	f000 ff3d 	bl	80015f0 <HAL_Delay>
 8000776:	e703      	b.n	8000580 <main+0x50>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000778:	2120      	movs	r1, #32
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <main+0x2ac>)
 800077c:	f001 ffc8 	bl	8002710 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d108      	bne.n	8000798 <main+0x268>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <main+0x2ac>)
 800078c:	f001 ffef 	bl	800276e <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000790:	20c8      	movs	r0, #200	; 0xc8
 8000792:	f000 ff2d 	bl	80015f0 <HAL_Delay>
 8000796:	e6f3      	b.n	8000580 <main+0x50>
	  }
	  else {
		  sprintf(str, "       ");
 8000798:	4917      	ldr	r1, [pc, #92]	; (80007f8 <main+0x2c8>)
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <main+0x2b4>)
 800079c:	f003 ffda 	bl	8004754 <siprintf>
		  LCD_SetPos(0, 2);
 80007a0:	2102      	movs	r1, #2
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fd94 	bl	80002d0 <LCD_SetPos>
		  LCD_String(str);
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <main+0x2b4>)
 80007aa:	f7ff fd73 	bl	8000294 <LCD_String>
		  LCD_SetPos(0, 0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fd8d 	bl	80002d0 <LCD_SetPos>
		  LCD_String(str);
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0x2b4>)
 80007b8:	f7ff fd6c 	bl	8000294 <LCD_String>
		  LCD_SetPos(0, 1);
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fd86 	bl	80002d0 <LCD_SetPos>
		  LCD_String(str);
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x2b4>)
 80007c6:	f7ff fd65 	bl	8000294 <LCD_String>
	  HAL_ADC_Start(&hadc1);
 80007ca:	e6d9      	b.n	8000580 <main+0x50>
 80007cc:	20000094 	.word	0x20000094
 80007d0:	20000118 	.word	0x20000118
 80007d4:	20000160 	.word	0x20000160
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40010800 	.word	0x40010800
 80007e0:	08005060 	.word	0x08005060
 80007e4:	20000164 	.word	0x20000164
 80007e8:	08005068 	.word	0x08005068
 80007ec:	08005070 	.word	0x08005070
 80007f0:	08005074 	.word	0x08005074
 80007f4:	08005078 	.word	0x08005078
 80007f8:	0800507c 	.word	0x0800507c

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	2228      	movs	r2, #40	; 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 ff9a 	bl	8004744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000848:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fbee 	bl	8003034 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800085e:	f000 fa07 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000872:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2102      	movs	r1, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fe5a 	bl	8003538 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800088a:	f000 f9f1 	bl	8000c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800088e:	2302      	movs	r3, #2
 8000890:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000896:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f002 ffe4 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a6:	f000 f9e3 	bl	8000c70 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_ADC1_Init+0x74>)
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <MX_ADC1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_ADC1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_ADC1_Init+0x74>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ADC1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ADC1_Init+0x74>)
 80008de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_ADC1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ADC1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_ADC1_Init+0x74>)
 80008f2:	f000 fea1 	bl	8001638 <HAL_ADC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008fc:	f000 f9b8 	bl	8000c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000904:	2301      	movs	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000908:	2302      	movs	r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_ADC1_Init+0x74>)
 8000912:	f001 fa21 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800091c:	f000 f9a8 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000094 	.word	0x20000094
 800092c:	40012400 	.word	0x40012400

08000930 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C2_Init+0x50>)
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_I2C2_Init+0x54>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C2_Init+0x50>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_I2C2_Init+0x58>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C2_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2C2_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_I2C2_Init+0x50>)
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_I2C2_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2C2_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_I2C2_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2C2_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C2_Init+0x50>)
 800096e:	f001 ff17 	bl	80027a0 <HAL_I2C_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000978:	f000 f97a 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000c4 	.word	0x200000c4
 8000984:	40005800 	.word	0x40005800
 8000988:	000186a0 	.word	0x000186a0

0800098c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009be:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <MX_TIM4_Init+0x12c>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009e2:	4834      	ldr	r0, [pc, #208]	; (8000ab4 <MX_TIM4_Init+0x128>)
 80009e4:	f003 f8b6 	bl	8003b54 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009ee:	f000 f93f 	bl	8000c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a00:	f003 fab0 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a0a:	f000 f931 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a10:	f003 f8ef 	bl	8003bf2 <HAL_TIM_PWM_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a1a:	f000 f929 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a2e:	f003 fe01 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a38:	f000 f91a 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	; 0x60
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a54:	f003 f9c8 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a5e:	f000 f907 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a6a:	f003 f9bd 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000a74:	f000 f8fc 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a80:	f003 f9b2 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000a8a:	f000 f8f1 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	220c      	movs	r2, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000a96:	f003 f9a7 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000aa0:	f000 f8e6 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_TIM4_Init+0x128>)
 8000aa6:	f000 f9bd 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000118 	.word	0x20000118
 8000ab8:	40000800 	.word	0x40000800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0xe4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8000b1e:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <MX_GPIO_Init+0xe8>)
 8000b20:	f001 fe0d 	bl	800273e <HAL_GPIO_WritePin>
                          |CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2138      	movs	r1, #56	; 0x38
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <MX_GPIO_Init+0xec>)
 8000b2a:	f001 fe08 	bl	800273e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b2e:	23fc      	movs	r3, #252	; 0xfc
 8000b30:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0xe8>)
 8000b42:	f001 fc61 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b46:	2303      	movs	r3, #3
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <MX_GPIO_Init+0xec>)
 8000b5a:	f001 fc55 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b5e:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 8000b62:	613b      	str	r3, [r7, #16]
                          |CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0xe8>)
 8000b78:	f001 fc46 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = DATA_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000b7c:	2338      	movs	r3, #56	; 0x38
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_GPIO_Init+0xec>)
 8000b94:	f001 fc38 	bl	8002408 <HAL_GPIO_Init>

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <HAL_ADC_ConvCpltCallback+0x20>
    {
        speed = HAL_ADC_GetValue(&hadc1);
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bc0:	f000 fff2 	bl	8001ba8 <HAL_ADC_GetValue>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_ADC_ConvCpltCallback+0x30>)
 8000bca:	801a      	strh	r2, [r3, #0]
    }
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40012400 	.word	0x40012400
 8000bd8:	20000094 	.word	0x20000094
 8000bdc:	20000160 	.word	0x20000160

08000be0 <MOVE_FORWARD>:

void MOVE_FORWARD() {
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	TIM4->CCR1=speed * 16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MOVE_FORWARD+0x2c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	011a      	lsls	r2, r3, #4
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MOVE_FORWARD+0x30>)
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=0;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MOVE_FORWARD+0x30>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=speed * 16;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <MOVE_FORWARD+0x2c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	011a      	lsls	r2, r3, #4
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <MOVE_FORWARD+0x30>)
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4=0;
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <MOVE_FORWARD+0x30>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000160 	.word	0x20000160
 8000c10:	40000800 	.word	0x40000800

08000c14 <MOVE_BACK>:

void MOVE_BACK() {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	TIM4->CCR1=0;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MOVE_BACK+0x2c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=speed * 16;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MOVE_BACK+0x30>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	011a      	lsls	r2, r3, #4
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MOVE_BACK+0x2c>)
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=0;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MOVE_BACK+0x2c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4=speed * 16;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MOVE_BACK+0x30>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	011a      	lsls	r2, r3, #4
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <MOVE_BACK+0x2c>)
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40000800 	.word	0x40000800
 8000c44:	20000160 	.word	0x20000160

08000c48 <STOP>:

void STOP() {
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	TIM4->CCR1=0;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <STOP+0x24>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=0;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <STOP+0x24>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=0;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <STOP+0x24>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4=0;
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <STOP+0x24>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40000800 	.word	0x40000800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_ADC_MspInit+0x7c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d129      	bne.n	8000d54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_ADC_MspInit+0x84>)
 8000d40:	f001 fb62 	bl	8002408 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2012      	movs	r0, #18
 8000d4a:	f001 fb26 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d4e:	2012      	movs	r0, #18
 8000d50:	f001 fb3f 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40012400 	.word	0x40012400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800

08000d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <HAL_I2C_MspInit+0x74>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d124      	bne.n	8000dd2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	2312      	movs	r3, #18
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_I2C_MspInit+0x7c>)
 8000db6:	f001 fb27 	bl	8002408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_I2C_MspInit+0x78>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005800 	.word	0x40005800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_Base_MspInit+0x34>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_Base_MspInit+0x38>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_TIM_Base_MspInit+0x38>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_TIM_Base_MspInit+0x38>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40000800 	.word	0x40000800
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_TIM_MspPostInit+0x5c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d118      	bne.n	8000e76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_TIM_MspPostInit+0x60>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_TIM_MspPostInit+0x60>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_TIM_MspPostInit+0x60>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_TIM_MspPostInit+0x64>)
 8000e72:	f001 fac9 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40000800 	.word	0x40000800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 fb71 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <ADC1_2_IRQHandler+0x10>)
 8000ee2:	f000 fe6d 	bl	8001bc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000094 	.word	0x20000094

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f003 fbe6 	bl	80046f0 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20005000 	.word	0x20005000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	200001c8 	.word	0x200001c8
 8000f58:	200001e8 	.word	0x200001e8

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <tik_delay>:
	0x40     //Cегмент G
  };
//=========================================================================//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//=========================================================================//
void tik_delay(uint32_t i){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
while(i)i--;
 8000f70:	e002      	b.n	8000f78 <tik_delay+0x10>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f9      	bne.n	8000f72 <tik_delay+0xa>
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
	...

08000f8c <TM1637_Generate_START>:
//=========================================================================//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//=========================================================================//
void TM1637_Generate_START(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
 Set_CLK_Pin();
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <TM1637_Generate_START+0x30>)
 8000f98:	f001 fbd1 	bl	800273e <HAL_GPIO_WritePin>
 Set_DATA_Pin();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <TM1637_Generate_START+0x34>)
 8000fa2:	f001 fbcc 	bl	800273e <HAL_GPIO_WritePin>
 tik_delay(I2C_DELAY);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f7ff ffde 	bl	8000f68 <tik_delay>
 Reset_DATA_Pin();
 8000fac:	2200      	movs	r2, #0
 8000fae:	2108      	movs	r1, #8
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <TM1637_Generate_START+0x34>)
 8000fb2:	f001 fbc4 	bl	800273e <HAL_GPIO_WritePin>
 }
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00

08000fc4 <TM1637_Generate_STOP>:
//=========================================================================//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//=========================================================================//
 void TM1637_Generate_STOP(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	 
  Reset_CLK_Pin();
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <TM1637_Generate_STOP+0x48>)
 8000fd0:	f001 fbb5 	bl	800273e <HAL_GPIO_WritePin>
  tik_delay(I2C_DELAY);
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f7ff ffc7 	bl	8000f68 <tik_delay>
  Reset_DATA_Pin();
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2108      	movs	r1, #8
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <TM1637_Generate_STOP+0x4c>)
 8000fe0:	f001 fbad 	bl	800273e <HAL_GPIO_WritePin>
  tik_delay(I2C_DELAY);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f7ff ffbf 	bl	8000f68 <tik_delay>
  Set_CLK_Pin();
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <TM1637_Generate_STOP+0x48>)
 8000ff2:	f001 fba4 	bl	800273e <HAL_GPIO_WritePin>
  tik_delay(I2C_DELAY);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f7ff ffb6 	bl	8000f68 <tik_delay>
  Set_DATA_Pin(); 
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2108      	movs	r1, #8
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <TM1637_Generate_STOP+0x4c>)
 8001002:	f001 fb9c 	bl	800273e <HAL_GPIO_WritePin>
	 
 }
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00

08001014 <TM1637_WriteData>:
//=========================================================================//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//=========================================================================//
void TM1637_WriteData(uint8_t data)//ПЕРЕДАЧА ОТМЛАДШЕГО К СТРАШЕМУ!!!НЕ СТАНДАРТ
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
    for(i=0;i<8;i++)        
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e027      	b.n	8001074 <TM1637_WriteData+0x60>
  {
    Reset_CLK_Pin();
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <TM1637_WriteData+0xc4>)
 800102c:	f001 fb87 	bl	800273e <HAL_GPIO_WritePin>
    if(data & 0x01)Set_DATA_Pin();
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <TM1637_WriteData+0x32>
 800103a:	2201      	movs	r2, #1
 800103c:	2108      	movs	r1, #8
 800103e:	4827      	ldr	r0, [pc, #156]	; (80010dc <TM1637_WriteData+0xc8>)
 8001040:	f001 fb7d 	bl	800273e <HAL_GPIO_WritePin>
 8001044:	e004      	b.n	8001050 <TM1637_WriteData+0x3c>
    else Reset_DATA_Pin();
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <TM1637_WriteData+0xc8>)
 800104c:	f001 fb77 	bl	800273e <HAL_GPIO_WritePin>
	  tik_delay(I2C_DELAY);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f7ff ff89 	bl	8000f68 <tik_delay>
    data = data>>1;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
    Set_CLK_Pin();
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	481d      	ldr	r0, [pc, #116]	; (80010d8 <TM1637_WriteData+0xc4>)
 8001064:	f001 fb6b 	bl	800273e <HAL_GPIO_WritePin>
    tik_delay(I2C_DELAY);		
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f7ff ff7d 	bl	8000f68 <tik_delay>
    for(i=0;i<8;i++)        
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d9d4      	bls.n	8001024 <TM1637_WriteData+0x10>
	}
	Reset_CLK_Pin();
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	4815      	ldr	r0, [pc, #84]	; (80010d8 <TM1637_WriteData+0xc4>)
 8001082:	f001 fb5c 	bl	800273e <HAL_GPIO_WritePin>
	tik_delay(I2C_DELAY);	
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f7ff ff6e 	bl	8000f68 <tik_delay>
  Reset_DATA_Pin();
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <TM1637_WriteData+0xc8>)
 8001092:	f001 fb54 	bl	800273e <HAL_GPIO_WritePin>
  while(Read_DATA_Pin());
 8001096:	bf00      	nop
 8001098:	2108      	movs	r1, #8
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <TM1637_WriteData+0xc8>)
 800109c:	f001 fb38 	bl	8002710 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f8      	bne.n	8001098 <TM1637_WriteData+0x84>
  Set_DATA_Pin(); 
 80010a6:	2201      	movs	r2, #1
 80010a8:	2108      	movs	r1, #8
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <TM1637_WriteData+0xc8>)
 80010ac:	f001 fb47 	bl	800273e <HAL_GPIO_WritePin>
  Set_CLK_Pin();
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <TM1637_WriteData+0xc4>)
 80010b8:	f001 fb41 	bl	800273e <HAL_GPIO_WritePin>
  tik_delay(I2C_DELAY);		
 80010bc:	2064      	movs	r0, #100	; 0x64
 80010be:	f7ff ff53 	bl	8000f68 <tik_delay>
	Reset_CLK_Pin();
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <TM1637_WriteData+0xc4>)
 80010ca:	f001 fb38 	bl	800273e <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40010c00 	.word	0x40010c00

080010e0 <TM1637_coding>:

//============================================================================//
//=========меняем число  на его позицию  в массиве digitToSegment=============//
//============================================================================//
int8_t TM1637_coding(uint8_t DispData)// шифратор знакомест
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t PointData;
	if(PointFlag == POINT_ON)PointData = 0x80;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <TM1637_coding+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <TM1637_coding+0x18>
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e001      	b.n	80010fc <TM1637_coding+0x1c>
	else PointData = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
	if(DispData == 0x7f) DispData = 0x00 + PointData;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001100:	d102      	bne.n	8001108 <TM1637_coding+0x28>
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e005      	b.n	8001114 <TM1637_coding+0x34>
	else DispData = digitToSegment[DispData] + PointData;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <TM1637_coding+0x48>)
 800110c:	5cd2      	ldrb	r2, [r2, r3]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4413      	add	r3, r2
 8001112:	71fb      	strb	r3, [r7, #7]
	return DispData;
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
}		
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000005 	.word	0x20000005
 8001128:	080050bc 	.word	0x080050bc

0800112c <TM1637_coding_all>:
//============================================================================//
//==меняем числа в массиве DispData на их позиции в массиве digitToSegment====//
//============================================================================//
void TM1637_coding_all(uint8_t DispData[])//шифратор знакомест 
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uint8_t PointData;
	uint8_t i;
	PointData =  PointFlag ? 0x80:0;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <TM1637_coding_all+0xb0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <TM1637_coding_all+0x14>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	e000      	b.n	8001142 <TM1637_coding_all+0x16>
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
	for(i = 0;i < 4;i ++)
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e026      	b.n	8001198 <TM1637_coding_all+0x6c>
	{
		if(DispData[i] == 0x7f)DispData[i] = 0x00;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b7f      	cmp	r3, #127	; 0x7f
 8001154:	d105      	bne.n	8001162 <TM1637_coding_all+0x36>
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e00d      	b.n	800117e <TM1637_coding_all+0x52>
		else DispData[i] = digitToSegment[DispData[i]] + PointData; 
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <TM1637_coding_all+0xb4>)
 800116e:	5c99      	ldrb	r1, [r3, r2]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	7bba      	ldrb	r2, [r7, #14]
 8001178:	440a      	add	r2, r1
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
	DispData[i] += 0x80;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	440b      	add	r3, r1
 800118c:	3a80      	subs	r2, #128	; 0x80
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < 4;i ++)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d9d5      	bls.n	800114a <TM1637_coding_all+0x1e>
	}
	if((_DispType == D4056A)&&(DecPoint != 3))
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <TM1637_coding_all+0xb8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d114      	bne.n	80011d0 <TM1637_coding_all+0xa4>
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <TM1637_coding_all+0xbc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d010      	beq.n	80011d0 <TM1637_coding_all+0xa4>
	{
	DispData[DecPoint] += 0x80;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <TM1637_coding_all+0xbc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <TM1637_coding_all+0xbc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	440b      	add	r3, r1
 80011c4:	3a80      	subs	r2, #128	; 0x80
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
	DecPoint = 3;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <TM1637_coding_all+0xbc>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	701a      	strb	r2, [r3, #0]
	}
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000005 	.word	0x20000005
 80011e0:	080050bc 	.word	0x080050bc
 80011e4:	20000006 	.word	0x20000006
 80011e8:	200001cd 	.word	0x200001cd

080011ec <separate_Digit_to_digits>:
//=========================================================================//
//+++++++++++++++++++разбиваем число на "сегменты"+++++++++++++++++++++++++//
//=========================================================================//
void separate_Digit_to_digits(int16_t Digit,uint8_t SegArray[])//разбиваем целое число на массив чисел
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
	
	if((Digit > 9999)||(Digit < -999))return;
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001200:	4293      	cmp	r3, r2
 8001202:	f300 80d6 	bgt.w	80013b2 <separate_Digit_to_digits+0x1c6>
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800120e:	f340 80d0 	ble.w	80013b2 <separate_Digit_to_digits+0x1c6>
	if(Digit < 0)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da57      	bge.n	80012ca <separate_Digit_to_digits+0xde>
	{
		SegArray[0] = INDEX_NEGATIVE_SIGN;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2210      	movs	r2, #16
 800121e:	701a      	strb	r2, [r3, #0]
		Digit = (Digit & 0x7fff);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001226:	80fb      	strh	r3, [r7, #6]
		SegArray[1] = Digit/100;
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <separate_Digit_to_digits+0x1d0>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1152      	asrs	r2, r2, #5
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b21a      	sxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
		Digit %= 100;
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	4a5d      	ldr	r2, [pc, #372]	; (80013bc <separate_Digit_to_digits+0x1d0>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1151      	asrs	r1, r2, #5
 800124e:	17da      	asrs	r2, r3, #31
 8001250:	1a8a      	subs	r2, r1, r2
 8001252:	2164      	movs	r1, #100	; 0x64
 8001254:	fb01 f202 	mul.w	r2, r1, r2
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	80fb      	strh	r3, [r7, #6]
		SegArray[2] = Digit / 10;
 800125c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001260:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <separate_Digit_to_digits+0x1d4>)
 8001262:	fb82 1203 	smull	r1, r2, r2, r3
 8001266:	1092      	asrs	r2, r2, #2
 8001268:	17db      	asrs	r3, r3, #31
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3302      	adds	r3, #2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
		SegArray[3] = Digit % 10;
 8001276:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <separate_Digit_to_digits+0x1d4>)
 800127c:	fb83 1302 	smull	r1, r3, r3, r2
 8001280:	1099      	asrs	r1, r3, #2
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	1ac9      	subs	r1, r1, r3
 8001286:	460b      	mov	r3, r1
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b21a      	sxth	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3303      	adds	r3, #3
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
		if(BlankingFlag)
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <separate_Digit_to_digits+0x1d8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8083 	beq.w	80013aa <separate_Digit_to_digits+0x1be>
		{
			if(SegArray[1] == 0)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d17d      	bne.n	80013aa <separate_Digit_to_digits+0x1be>
			{
				SegArray[1] = INDEX_BLANK;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
				if(SegArray[2] == 0) SegArray[2] = INDEX_BLANK;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3302      	adds	r3, #2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d174      	bne.n	80013aa <separate_Digit_to_digits+0x1be>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3302      	adds	r3, #2
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e06f      	b.n	80013aa <separate_Digit_to_digits+0x1be>
			}
		}
	}
	else
	{
		SegArray[0] = Digit/1000;
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <separate_Digit_to_digits+0x1dc>)
 80012d0:	fb82 1203 	smull	r1, r2, r2, r3
 80012d4:	1192      	asrs	r2, r2, #6
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	701a      	strb	r2, [r3, #0]
		Digit %= 1000;
 80012e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <separate_Digit_to_digits+0x1dc>)
 80012e8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ec:	1191      	asrs	r1, r2, #6
 80012ee:	17da      	asrs	r2, r3, #31
 80012f0:	1a8a      	subs	r2, r1, r2
 80012f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f6:	fb01 f202 	mul.w	r2, r1, r2
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]
		SegArray[1] = Digit/100;
 80012fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <separate_Digit_to_digits+0x1d0>)
 8001304:	fb82 1203 	smull	r1, r2, r2, r3
 8001308:	1152      	asrs	r2, r2, #5
 800130a:	17db      	asrs	r3, r3, #31
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]
		Digit %= 100;
 8001318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <separate_Digit_to_digits+0x1d0>)
 800131e:	fb82 1203 	smull	r1, r2, r2, r3
 8001322:	1151      	asrs	r1, r2, #5
 8001324:	17da      	asrs	r2, r3, #31
 8001326:	1a8a      	subs	r2, r1, r2
 8001328:	2164      	movs	r1, #100	; 0x64
 800132a:	fb01 f202 	mul.w	r2, r1, r2
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	80fb      	strh	r3, [r7, #6]
		SegArray[2] = Digit / 10;
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <separate_Digit_to_digits+0x1d4>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1092      	asrs	r2, r2, #2
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b21a      	sxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3302      	adds	r3, #2
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	701a      	strb	r2, [r3, #0]
		SegArray[3] = Digit % 10;
 800134c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <separate_Digit_to_digits+0x1d4>)
 8001352:	fb83 1302 	smull	r1, r3, r3, r2
 8001356:	1099      	asrs	r1, r3, #2
 8001358:	17d3      	asrs	r3, r2, #31
 800135a:	1ac9      	subs	r1, r1, r3
 800135c:	460b      	mov	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b21a      	sxth	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3303      	adds	r3, #3
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	701a      	strb	r2, [r3, #0]
		if(BlankingFlag)
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <separate_Digit_to_digits+0x1d8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d018      	beq.n	80013aa <separate_Digit_to_digits+0x1be>
		{
			if(SegArray[0] == 0)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d114      	bne.n	80013aa <separate_Digit_to_digits+0x1be>
			{
				SegArray[0] = INDEX_BLANK;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				if(SegArray[1] == 0)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <separate_Digit_to_digits+0x1be>
				{
					SegArray[1] = INDEX_BLANK;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
					if(SegArray[2] == 0) SegArray[2] = INDEX_BLANK;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3302      	adds	r3, #2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <separate_Digit_to_digits+0x1be>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3302      	adds	r3, #2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	BlankingFlag = 1;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <separate_Digit_to_digits+0x1d8>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e000      	b.n	80013b4 <separate_Digit_to_digits+0x1c8>
	if((Digit > 9999)||(Digit < -999))return;
 80013b2:	bf00      	nop
}
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	51eb851f 	.word	0x51eb851f
 80013c0:	66666667 	.word	0x66666667
 80013c4:	200001ce 	.word	0x200001ce
 80013c8:	10624dd3 	.word	0x10624dd3

080013cc <TM1637_display>:
//=========================================================================//
//+++++++++++++++++++++++++отображает один символ из массива+++++++++++++++//
//=========================================================================//
void TM1637_display(uint8_t Seg_N,int8_t DispData)//  в определенном месте  (от 0 до 3)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]
  int8_t SegData;
  SegData = TM1637_coding(DispData);
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe7e 	bl	80010e0 <TM1637_coding>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  TM1637_Generate_START();                                
 80013e8:	f7ff fdd0 	bl	8000f8c <TM1637_Generate_START>
	TM1637_WriteData(ADDR_FIXED);//1:фиксированный адресс
 80013ec:	2044      	movs	r0, #68	; 0x44
 80013ee:	f7ff fe11 	bl	8001014 <TM1637_WriteData>
  TM1637_Generate_STOP();
 80013f2:	f7ff fde7 	bl	8000fc4 <TM1637_Generate_STOP>
  TM1637_Generate_START();
 80013f6:	f7ff fdc9 	bl	8000f8c <TM1637_Generate_START>
  TM1637_WriteData(Seg_N|0xc0);// устанавливаем адресс старшие 2 бита должны быть 1(0xc0)+ номер сегмента
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe06 	bl	8001014 <TM1637_WriteData>
  TM1637_WriteData(SegData);// отправляем "кодированные" данные для одного сегмента
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe02 	bl	8001014 <TM1637_WriteData>
  TM1637_Generate_STOP();
 8001410:	f7ff fdd8 	bl	8000fc4 <TM1637_Generate_STOP>
  TM1637_Generate_START();
 8001414:	f7ff fdba 	bl	8000f8c <TM1637_Generate_START>
  TM1637_WriteData(Cmd_DispCtrl);//включаем дисплей с выставлленой яркостью;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <TM1637_display+0x64>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fdf9 	bl	8001014 <TM1637_WriteData>
  TM1637_Generate_STOP();
 8001422:	f7ff fdcf 	bl	8000fc4 <TM1637_Generate_STOP>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001cc 	.word	0x200001cc

08001434 <TM1637_display_all>:
//=========================================================================//
//++++++++++++++++++++отображение чисел -999-9999++++++++++++++++++++++++++//
//=========================================================================//
void TM1637_display_all(uint16_t Digit) 
											
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  uint8_t SegData[4];
  uint8_t i;
	separate_Digit_to_digits(Digit,SegData);
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	f107 0208 	add.w	r2, r7, #8
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fecf 	bl	80011ec <separate_Digit_to_digits>
  TM1637_coding_all(SegData);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe6a 	bl	800112c <TM1637_coding_all>
  TM1637_Generate_START();
 8001458:	f7ff fd98 	bl	8000f8c <TM1637_Generate_START>
  TM1637_WriteData(ADDR_AUTO);//автоматический инкремент адреса
 800145c:	2040      	movs	r0, #64	; 0x40
 800145e:	f7ff fdd9 	bl	8001014 <TM1637_WriteData>
  TM1637_Generate_STOP();
 8001462:	f7ff fdaf 	bl	8000fc4 <TM1637_Generate_STOP>
  TM1637_Generate_START();
 8001466:	f7ff fd91 	bl	8000f8c <TM1637_Generate_START>
  TM1637_WriteData(Cmd_SetAddr);//адрес первого сегмента 0xc0 
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <TM1637_display_all+0x80>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fdd0 	bl	8001014 <TM1637_WriteData>
  for(i=0;i < 4;i ++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e00a      	b.n	8001490 <TM1637_display_all+0x5c>
  {
    TM1637_WriteData(SegData[i]);//передаем значения для i-го сегмента
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3310      	adds	r3, #16
 800147e:	443b      	add	r3, r7
 8001480:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fdc5 	bl	8001014 <TM1637_WriteData>
  for(i=0;i < 4;i ++)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3301      	adds	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d9f1      	bls.n	800147a <TM1637_display_all+0x46>
  }
  TM1637_Generate_STOP();
 8001496:	f7ff fd95 	bl	8000fc4 <TM1637_Generate_STOP>
  TM1637_Generate_START();
 800149a:	f7ff fd77 	bl	8000f8c <TM1637_Generate_START>
  TM1637_WriteData(Cmd_DispCtrl);//включаем дисплей с выставлленой яркостью;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <TM1637_display_all+0x84>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fdb6 	bl	8001014 <TM1637_WriteData>
  TM1637_Generate_STOP();
 80014a8:	f7ff fd8c 	bl	8000fc4 <TM1637_Generate_STOP>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000004 	.word	0x20000004
 80014b8:	200001cc 	.word	0x200001cc

080014bc <TM1637_brightness>:
//=========================================================================//
//++++++++++++++++++++регулровка яркости дисплея+++++++++++++++++++++++++++//
//=========================================================================//
void TM1637_brightness(uint8_t brightness)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  Cmd_DispCtrl = 0x88 + brightness;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3b78      	subs	r3, #120	; 0x78
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <TM1637_brightness+0x20>)
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200001cc 	.word	0x200001cc

080014e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001506:	f7ff fd29 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f003 f8f7 	bl	80046fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff f80f 	bl	8000530 <main>
  bx lr
 8001512:	4770      	bx	lr
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800151c:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8001520:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001524:	200001e4 	.word	0x200001e4

08001528 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <CAN1_RX1_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 ff21 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fb98 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 ff39 	bl	80023ee <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 ff01 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	20000008 	.word	0x20000008

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	200001d0 	.word	0x200001d0

080015dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200001d0 	.word	0x200001d0

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fff0 	bl	80015dc <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffe0 	bl	80015dc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000000c 	.word	0x2000000c

08001638 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0be      	b.n	80017d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fb32 	bl	8000ce0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fcbd 	bl	8001ffc <ADC_ConversionStop_Disable>
 8001682:	4603      	mov	r3, r0
 8001684:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8099 	bne.w	80017c6 <HAL_ADC_Init+0x18e>
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8095 	bne.w	80017c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a4:	f023 0302 	bic.w	r3, r3, #2
 80016a8:	f043 0202 	orr.w	r2, r3, #2
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d0:	d003      	beq.n	80016da <HAL_ADC_Init+0xa2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_ADC_Init+0xa8>
 80016da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016de:	e000      	b.n	80016e2 <HAL_ADC_Init+0xaa>
 80016e0:	2300      	movs	r3, #0
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7d1b      	ldrb	r3, [r3, #20]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d119      	bne.n	8001724 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7b1b      	ldrb	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	035a      	lsls	r2, r3, #13
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	e00b      	b.n	8001724 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_ADC_Init+0x1a8>)
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	430b      	orrs	r3, r1
 800174a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001754:	d003      	beq.n	800175e <HAL_ADC_Init+0x126>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d104      	bne.n	8001768 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	3b01      	subs	r3, #1
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	430a      	orrs	r2, r1
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_ADC_Init+0x1ac>)
 8001784:	4013      	ands	r3, r2
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	429a      	cmp	r2, r3
 800178a:	d10b      	bne.n	80017a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a2:	e018      	b.n	80017d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f023 0312 	bic.w	r3, r3, #18
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c4:	e007      	b.n	80017d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	ffe1f7fd 	.word	0xffe1f7fd
 80017e4:	ff1f0efe 	.word	0xff1f0efe

080017e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Start+0x1a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e098      	b.n	8001934 <HAL_ADC_Start+0x14c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fb9c 	bl	8001f48 <ADC_Enable>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8087 	bne.w	800192a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_ADC_Start+0x154>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d105      	bne.n	8001846 <HAL_ADC_Start+0x5e>
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_ADC_Start+0x158>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d115      	bne.n	8001872 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d026      	beq.n	80018ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001870:	e01d      	b.n	80018ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <HAL_ADC_Start+0x158>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Start+0xaa>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2b      	ldr	r2, [pc, #172]	; (800193c <HAL_ADC_Start+0x154>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10d      	bne.n	80018ae <HAL_ADC_Start+0xc6>
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_ADC_Start+0x158>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f023 0206 	bic.w	r2, r3, #6
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c6:	e002      	b.n	80018ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 0202 	mvn.w	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018ee:	d113      	bne.n	8001918 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_ADC_Start+0x154>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_ADC_Start+0x158>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	e00c      	b.n	8001932 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e003      	b.n	8001932 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40012800 	.word	0x40012800
 8001940:	40012400 	.word	0x40012400

08001944 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Stop+0x1a>
 800195a:	2302      	movs	r3, #2
 800195c:	e01a      	b.n	8001994 <HAL_ADC_Stop+0x50>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fb48 	bl	8001ffc <ADC_ConversionStop_Disable>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019b2:	f7ff fe13 	bl	80015dc <HAL_GetTick>
 80019b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	f043 0220 	orr.w	r2, r3, #32
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0d3      	b.n	8001b86 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d131      	bne.n	8001a50 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d12a      	bne.n	8001a50 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019fa:	e021      	b.n	8001a40 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a02:	d01d      	beq.n	8001a40 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_ADC_PollForConversion+0x7e>
 8001a0a:	f7ff fde7 	bl	80015dc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d212      	bcs.n	8001a40 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10b      	bne.n	8001a40 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0a2      	b.n	8001b86 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0d6      	beq.n	80019fc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a4e:	e070      	b.n	8001b32 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_ADC_PollForConversion+0x1f4>)
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	2002      	movs	r0, #2
 8001a56:	f001 ffbd 	bl	80039d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6919      	ldr	r1, [r3, #16]
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_ADC_PollForConversion+0x1f8>)
 8001a68:	400b      	ands	r3, r1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x104>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68d9      	ldr	r1, [r3, #12]
 8001a74:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <HAL_ADC_PollForConversion+0x1fc>)
 8001a76:	400b      	ands	r3, r1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x104>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_ADC_PollForConversion+0x200>)
 8001a84:	400b      	ands	r3, r1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d108      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x100>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_ADC_PollForConversion+0x204>)
 8001a92:	400b      	ands	r3, r1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x100>
 8001a98:	2314      	movs	r3, #20
 8001a9a:	e020      	b.n	8001ade <HAL_ADC_PollForConversion+0x142>
 8001a9c:	2329      	movs	r3, #41	; 0x29
 8001a9e:	e01e      	b.n	8001ade <HAL_ADC_PollForConversion+0x142>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_ADC_PollForConversion+0x200>)
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_ADC_PollForConversion+0x120>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68d9      	ldr	r1, [r3, #12]
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_ADC_PollForConversion+0x204>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_ADC_PollForConversion+0x13c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6919      	ldr	r1, [r3, #16]
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_ADC_PollForConversion+0x208>)
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d108      	bne.n	8001adc <HAL_ADC_PollForConversion+0x140>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68d9      	ldr	r1, [r3, #12]
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_ADC_PollForConversion+0x208>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_PollForConversion+0x140>
 8001ad8:	2354      	movs	r3, #84	; 0x54
 8001ada:	e000      	b.n	8001ade <HAL_ADC_PollForConversion+0x142>
 8001adc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ae4:	e021      	b.n	8001b2a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d01a      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_ADC_PollForConversion+0x168>
 8001af4:	f7ff fd72 	bl	80015dc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d20f      	bcs.n	8001b24 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d90b      	bls.n	8001b24 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f043 0204 	orr.w	r2, r3, #4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e030      	b.n	8001b86 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d8d9      	bhi.n	8001ae6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0212 	mvn.w	r2, #18
 8001b3a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b56:	d115      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000
 8001b94:	24924924 	.word	0x24924924
 8001b98:	00924924 	.word	0x00924924
 8001b9c:	12492492 	.word	0x12492492
 8001ba0:	00492492 	.word	0x00492492
 8001ba4:	00249249 	.word	0x00249249

08001ba8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d140      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d139      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c0a:	d11d      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d119      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0220 	bic.w	r2, r2, #32
 8001c22:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7fe ffaf 	bl	8000bac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0212 	mvn.w	r2, #18
 8001c56:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	d14f      	bne.n	8001d06 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d148      	bne.n	8001d06 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c96:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c9a:	d012      	beq.n	8001cc2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d125      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cb4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d119      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fa6e 	bl	80021d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 020c 	mvn.w	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b40      	cmp	r3, #64	; 0x40
 8001d12:	d114      	bne.n	8001d3e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10d      	bne.n	8001d3e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f809 	bl	8001d46 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0201 	mvn.w	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0dc      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1da>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d81c      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b05      	subs	r3, #5
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b05      	subs	r3, #5
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc0:	e03c      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d81c      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b23      	subs	r3, #35	; 0x23
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b23      	subs	r3, #35	; 0x23
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
 8001e02:	e01b      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b41      	subs	r3, #65	; 0x41
 8001e16:	221f      	movs	r2, #31
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b41      	subs	r3, #65	; 0x41
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d91c      	bls.n	8001e7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4019      	ands	r1, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	e019      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2207      	movs	r2, #7
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d003      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d132      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d125      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d126      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ee8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d11a      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0c9a      	lsrs	r2, r3, #18
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x1b2>
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012400 	.word	0x40012400
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d040      	beq.n	8001fe8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <ADC_Enable+0xac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <ADC_Enable+0xb0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f84:	e002      	b.n	8001f8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f92:	f7ff fb23 	bl	80015dc <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f98:	e01f      	b.n	8001fda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7ff fb1f 	bl	80015dc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d918      	bls.n	8001fda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d011      	beq.n	8001fda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e007      	b.n	8001fea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d1d8      	bne.n	8001f9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12e      	bne.n	8002074 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff fad9 	bl	80015dc <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800202c:	e01b      	b.n	8002066 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202e:	f7ff fad5 	bl	80015dc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d914      	bls.n	8002066 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10d      	bne.n	8002066 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d0dc      	beq.n	800202e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADCEx_Calibration_Start+0x1e>
 800209a:	2302      	movs	r3, #2
 800209c:	e095      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa8 	bl	8001ffc <ADC_ConversionStop_Disable>
 80020ac:	4603      	mov	r3, r0
 80020ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 8084 	bne.w	80021c0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020cc:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_ADCEx_Calibration_Start+0x154>)
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	2002      	movs	r0, #2
 80020d2:	f001 fc7f 	bl	80039d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80020d6:	4603      	mov	r3, r0
 80020d8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80020dc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80020de:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff2a 	bl	8001f48 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002104:	f7ff fa6a 	bl	80015dc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800210a:	e01b      	b.n	8002144 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800210c:	f7ff fa66 	bl	80015dc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d914      	bls.n	8002144 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f023 0312 	bic.w	r3, r3, #18
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e042      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1dc      	bne.n	800210c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0204 	orr.w	r2, r2, #4
 8002160:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002162:	f7ff fa3b 	bl	80015dc <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002168:	e01b      	b.n	80021a2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800216a:	f7ff fa37 	bl	80015dc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b0a      	cmp	r3, #10
 8002176:	d914      	bls.n	80021a2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f023 0312 	bic.w	r3, r3, #18
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e013      	b.n	80021ca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1dc      	bne.n	800216a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4906      	ldr	r1, [pc, #24]	; (8002284 <__NVIC_EnableIRQ+0x34>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff90 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff2d 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff42 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff35 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e169      	b.n	80026f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800241c:	2201      	movs	r2, #1
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	f040 8158 	bne.w	80026ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a9a      	ldr	r2, [pc, #616]	; (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002444:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d875      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800244a:	4a98      	ldr	r2, [pc, #608]	; (80026ac <HAL_GPIO_Init+0x2a4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d058      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002450:	4a96      	ldr	r2, [pc, #600]	; (80026ac <HAL_GPIO_Init+0x2a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d86f      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002456:	4a96      	ldr	r2, [pc, #600]	; (80026b0 <HAL_GPIO_Init+0x2a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d052      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 800245c:	4a94      	ldr	r2, [pc, #592]	; (80026b0 <HAL_GPIO_Init+0x2a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d869      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002462:	4a94      	ldr	r2, [pc, #592]	; (80026b4 <HAL_GPIO_Init+0x2ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04c      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002468:	4a92      	ldr	r2, [pc, #584]	; (80026b4 <HAL_GPIO_Init+0x2ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d863      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800246e:	4a92      	ldr	r2, [pc, #584]	; (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d046      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002474:	4a90      	ldr	r2, [pc, #576]	; (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d85d      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d82a      	bhi.n	80024d4 <HAL_GPIO_Init+0xcc>
 800247e:	2b12      	cmp	r3, #18
 8002480:	d859      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_GPIO_Init+0x80>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002503 	.word	0x08002503
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024ef 	.word	0x080024ef
 8002494:	08002531 	.word	0x08002531
 8002498:	08002537 	.word	0x08002537
 800249c:	08002537 	.word	0x08002537
 80024a0:	08002537 	.word	0x08002537
 80024a4:	08002537 	.word	0x08002537
 80024a8:	08002537 	.word	0x08002537
 80024ac:	08002537 	.word	0x08002537
 80024b0:	08002537 	.word	0x08002537
 80024b4:	08002537 	.word	0x08002537
 80024b8:	08002537 	.word	0x08002537
 80024bc:	08002537 	.word	0x08002537
 80024c0:	08002537 	.word	0x08002537
 80024c4:	08002537 	.word	0x08002537
 80024c8:	08002537 	.word	0x08002537
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024f9 	.word	0x080024f9
 80024d4:	4a79      	ldr	r2, [pc, #484]	; (80026bc <HAL_GPIO_Init+0x2b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024da:	e02c      	b.n	8002536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e029      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e024      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	3308      	adds	r3, #8
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e01f      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	330c      	adds	r3, #12
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e01a      	b.n	8002538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250a:	2304      	movs	r3, #4
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e013      	b.n	8002538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002518:	2308      	movs	r3, #8
 800251a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	611a      	str	r2, [r3, #16]
          break;
 8002522:	e009      	b.n	8002538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	615a      	str	r2, [r3, #20]
          break;
 800252e:	e003      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x130>
          break;
 8002536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d801      	bhi.n	8002542 <HAL_GPIO_Init+0x13a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_Init+0x13e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2bff      	cmp	r3, #255	; 0xff
 800254c:	d802      	bhi.n	8002554 <HAL_GPIO_Init+0x14c>
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x152>
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3b08      	subs	r3, #8
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	210f      	movs	r1, #15
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80b1 	beq.w	80026ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_GPIO_Init+0x2b8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a0:	4a48      	ldr	r2, [pc, #288]	; (80026c4 <HAL_GPIO_Init+0x2bc>)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <HAL_GPIO_Init+0x2c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x1ec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <HAL_GPIO_Init+0x2c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1e8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_GPIO_Init+0x2c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1e4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <HAL_GPIO_Init+0x2cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1e0>
 80025e4:	2303      	movs	r3, #3
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f4:	2300      	movs	r3, #0
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002606:	492f      	ldr	r1, [pc, #188]	; (80026c4 <HAL_GPIO_Init+0x2bc>)
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	492c      	ldr	r1, [pc, #176]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	43db      	mvns	r3, r3
 8002636:	4928      	ldr	r1, [pc, #160]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002638:	4013      	ands	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4922      	ldr	r1, [pc, #136]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	43db      	mvns	r3, r3
 800265e:	491e      	ldr	r1, [pc, #120]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002660:	4013      	ands	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4918      	ldr	r1, [pc, #96]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4914      	ldr	r1, [pc, #80]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d021      	beq.n	80026dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
 80026a4:	e021      	b.n	80026ea <HAL_GPIO_Init+0x2e2>
 80026a6:	bf00      	nop
 80026a8:	10320000 	.word	0x10320000
 80026ac:	10310000 	.word	0x10310000
 80026b0:	10220000 	.word	0x10220000
 80026b4:	10210000 	.word	0x10210000
 80026b8:	10120000 	.word	0x10120000
 80026bc:	10110000 	.word	0x10110000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_GPIO_Init+0x304>)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4909      	ldr	r1, [pc, #36]	; (800270c <HAL_GPIO_Init+0x304>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f ae8e 	bne.w	800241c <HAL_GPIO_Init+0x14>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	372c      	adds	r7, #44	; 0x2c
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
 800274a:	4613      	mov	r3, r2
 800274c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800274e:	787b      	ldrb	r3, [r7, #1]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800275a:	e003      	b.n	8002764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	041a      	lsls	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	611a      	str	r2, [r3, #16]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002780:	887a      	ldrh	r2, [r7, #2]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43d9      	mvns	r1, r3
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	400b      	ands	r3, r1
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	611a      	str	r2, [r3, #16]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e12b      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe face 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002804:	f000 ffea 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a81      	ldr	r2, [pc, #516]	; (8002a14 <HAL_I2C_Init+0x274>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d807      	bhi.n	8002824 <HAL_I2C_Init+0x84>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <HAL_I2C_Init+0x278>)
 8002818:	4293      	cmp	r3, r2
 800281a:	bf94      	ite	ls
 800281c:	2301      	movls	r3, #1
 800281e:	2300      	movhi	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e006      	b.n	8002832 <HAL_I2C_Init+0x92>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a7d      	ldr	r2, [pc, #500]	; (8002a1c <HAL_I2C_Init+0x27c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0e7      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <HAL_I2C_Init+0x280>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a6a      	ldr	r2, [pc, #424]	; (8002a14 <HAL_I2C_Init+0x274>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d802      	bhi.n	8002874 <HAL_I2C_Init+0xd4>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3301      	adds	r3, #1
 8002872:	e009      	b.n	8002888 <HAL_I2C_Init+0xe8>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a69      	ldr	r2, [pc, #420]	; (8002a24 <HAL_I2C_Init+0x284>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800289a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	495c      	ldr	r1, [pc, #368]	; (8002a14 <HAL_I2C_Init+0x274>)
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d819      	bhi.n	80028dc <HAL_I2C_Init+0x13c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e59      	subs	r1, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028bc:	400b      	ands	r3, r1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_I2C_Init+0x138>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e59      	subs	r1, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	e051      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028d8:	2304      	movs	r3, #4
 80028da:	e04f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <HAL_I2C_Init+0x168>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e012      	b.n	800292e <HAL_I2C_Init+0x18e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x196>
 8002932:	2301      	movs	r3, #1
 8002934:	e022      	b.n	800297c <HAL_I2C_Init+0x1dc>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10e      	bne.n	800295c <HAL_I2C_Init+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e58      	subs	r0, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	e00f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6911      	ldr	r1, [r2, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	000186a0 	.word	0x000186a0
 8002a18:	001e847f 	.word	0x001e847f
 8002a1c:	003d08ff 	.word	0x003d08ff
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7fe fdce 	bl	80015dc <HAL_GetTick>
 8002a40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	f040 80e0 	bne.w	8002c10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	4970      	ldr	r1, [pc, #448]	; (8002c1c <HAL_I2C_Master_Transmit+0x1f4>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f964 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0d3      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x50>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0cc      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d007      	beq.n	8002a9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f89c 	bl	8002c24 <I2C_MasterRequestWrite>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e08d      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b0c:	e066      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9de 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11b      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x188>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6a39      	ldr	r1, [r7, #32]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f9ce 	bl	8002f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d107      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01a      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d194      	bne.n	8002b0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	00100002 	.word	0x00100002
 8002c20:	ffff0000 	.word	0xffff0000

08002c24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d006      	beq.n	8002c4e <I2C_MasterRequestWrite+0x2a>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d003      	beq.n	8002c4e <I2C_MasterRequestWrite+0x2a>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c4c:	d108      	bne.n	8002c60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e00b      	b.n	8002c78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d107      	bne.n	8002c78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f84f 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9e:	d103      	bne.n	8002ca8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e035      	b.n	8002d18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	e01b      	b.n	8002d00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	11db      	asrs	r3, r3, #7
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0306 	and.w	r3, r3, #6
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f063 030f 	orn	r3, r3, #15
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <I2C_MasterRequestWrite+0xfc>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f875 	bl	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e010      	b.n	8002d18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <I2C_MasterRequestWrite+0x100>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f865 	bl	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	00010008 	.word	0x00010008
 8002d24:	00010002 	.word	0x00010002

08002d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d38:	e025      	b.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d021      	beq.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7fe fc4b 	bl	80015dc <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e023      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10d      	bne.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	e00c      	b.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d0b6      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de4:	e051      	b.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d123      	bne.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e046      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d021      	beq.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe fbc9 	bl	80015dc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e020      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10c      	bne.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e00b      	b.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d18d      	bne.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	e02d      	b.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f878 	bl	8002fd8 <I2C_IsAcknowledgeFailed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e02d      	b.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d021      	beq.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fe fb6f 	bl	80015dc <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e007      	b.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d1ca      	bne.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f62:	e02d      	b.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f837 	bl	8002fd8 <I2C_IsAcknowledgeFailed>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e02d      	b.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d021      	beq.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fb2e 	bl	80015dc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e007      	b.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d1ca      	bne.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d11b      	bne.n	8003028 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e272      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8087 	beq.w	8003162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b04      	cmp	r3, #4
 800305e:	d00c      	beq.n	800307a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d10b      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x12c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d168      	bne.n	8003160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e24c      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x76>
 800309c:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7a      	ldr	r2, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xbc>
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fa64 	bl	80015dc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fa60 	bl	80015dc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e200      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe4>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fa50 	bl	80015dc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fa4c 	bl	80015dc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1ec      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x10c>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1c0      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fa05 	bl	80015dc <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fe fa01 	bl	80015dc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1a1      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f9e4 	bl	80015dc <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe f9e0 	bl	80015dc <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e180      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03a      	beq.n	80032b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d019      	beq.n	800327e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fe f9c4 	bl	80015dc <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe f9c0 	bl	80015dc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e160      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003276:	2001      	movs	r0, #1
 8003278:	f000 fad8 	bl	800382c <RCC_Delay>
 800327c:	e01c      	b.n	80032b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe f9aa 	bl	80015dc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328a:	e00f      	b.n	80032ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fe f9a6 	bl	80015dc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d908      	bls.n	80032ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e146      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	42420000 	.word	0x42420000
 80032a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b92      	ldr	r3, [pc, #584]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e9      	bne.n	800328c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a6 	beq.w	8003412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a87      	ldr	r2, [pc, #540]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b85      	ldr	r3, [pc, #532]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_RCC_OscConfig+0x4c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x4c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x4c8>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe f967 	bl	80015dc <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fe f963 	bl	80015dc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e103      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b75      	ldr	r3, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x4c8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x312>
 8003338:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a6e      	ldr	r2, [pc, #440]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e02d      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x334>
 800334e:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a66      	ldr	r2, [pc, #408]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	e01c      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d10c      	bne.n	800338a <HAL_RCC_OscConfig+0x356>
 8003370:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a60      	ldr	r2, [pc, #384]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	e00b      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 800338a:	4b5b      	ldr	r3, [pc, #364]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a5a      	ldr	r2, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	4b58      	ldr	r3, [pc, #352]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fe f917 	bl	80015dc <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe f913 	bl	80015dc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0b1      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ee      	beq.n	80033b2 <HAL_RCC_OscConfig+0x37e>
 80033d4:	e014      	b.n	8003400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fe f901 	bl	80015dc <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe f8fd 	bl	80015dc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e09b      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ee      	bne.n	80033de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a3b      	ldr	r2, [pc, #236]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8087 	beq.w	800352a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d061      	beq.n	80034ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d146      	bne.n	80034be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_RCC_OscConfig+0x4cc>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe f8d1 	bl	80015dc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe f8cd 	bl	80015dc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e06d      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003450:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4921      	ldr	r1, [pc, #132]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a19      	ldr	r1, [r3, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	430b      	orrs	r3, r1
 800348a:	491b      	ldr	r1, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe f8a1 	bl	80015dc <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f89d 	bl	80015dc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03d      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x46a>
 80034bc:	e035      	b.n	800352a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCC_OscConfig+0x4cc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe f88a 	bl	80015dc <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f886 	bl	80015dc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e026      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x498>
 80034ea:	e01e      	b.n	800352a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e019      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
 8003500:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_OscConfig+0x500>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	429a      	cmp	r2, r3
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000

08003538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0d0      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4965      	ldr	r1, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800359e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d040      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d115      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e073      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4936      	ldr	r1, [pc, #216]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fd ffd8 	bl	80015dc <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fd ffd4 	bl	80015dc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e053      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d210      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4922      	ldr	r1, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1cc>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1d0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd ff36 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021000 	.word	0x40021000
 8003700:	080050a4 	.word	0x080050a4
 8003704:	20000000 	.word	0x20000000
 8003708:	20000008 	.word	0x20000008

0800370c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b490      	push	{r4, r7}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003714:	1d3c      	adds	r4, r7, #4
 8003716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800371c:	f240 2301 	movw	r3, #513	; 0x201
 8003720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x46>
 800374a:	e02b      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	e02b      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3328      	adds	r3, #40	; 0x28
 800375c:	443b      	add	r3, r7
 800375e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003762:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0c5b      	lsrs	r3, r3, #17
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	3328      	adds	r3, #40	; 0x28
 800377a:	443b      	add	r3, r7
 800377c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003780:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003786:	fb03 f202 	mul.w	r2, r3, r2
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e004      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	623b      	str	r3, [r7, #32]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037a6:	623b      	str	r3, [r7, #32]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc90      	pop	{r4, r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	08005084 	.word	0x08005084
 80037bc:	40021000 	.word	0x40021000
 80037c0:	007a1200 	.word	0x007a1200
 80037c4:	003d0900 	.word	0x003d0900

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000000 	.word	0x20000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e0:	f7ff fff2 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	080050b4 	.word	0x080050b4

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003808:	f7ff ffde 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	0adb      	lsrs	r3, r3, #11
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	080050b4 	.word	0x080050b4

0800382c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCC_Delay+0x34>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <RCC_Delay+0x38>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a5b      	lsrs	r3, r3, #9
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003848:	bf00      	nop
  }
  while (Delay --);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	60fa      	str	r2, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <RCC_Delay+0x1c>
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	20000000 	.word	0x20000000
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d118      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c8:	f7fd fe88 	bl	80015dc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd fe84 	bl	80015dc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e06d      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02e      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d027      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003922:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd fe53 	bl	80015dc <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd fe4f 	bl	80015dc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e036      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ee      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4917      	ldr	r1, [pc, #92]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42420440 	.word	0x42420440

080039d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b08d      	sub	sp, #52	; 0x34
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039dc:	4b58      	ldr	r3, [pc, #352]	; (8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80039de:	f107 040c 	add.w	r4, r7, #12
 80039e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039e8:	f240 2301 	movw	r3, #513	; 0x201
 80039ec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	f200 808e 	bhi.w	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d049      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d079      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a1c:	e086      	b.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003a1e:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a24:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d07f      	beq.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	0c9b      	lsrs	r3, r3, #18
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	3330      	adds	r3, #48	; 0x30
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a40:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0c5b      	lsrs	r3, r3, #17
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	3330      	adds	r3, #48	; 0x30
 8003a58:	443b      	add	r3, r7
 8003a5a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a6a:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	4a33      	ldr	r2, [pc, #204]	; (8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d102      	bne.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a98:	e04a      	b.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003aa8:	e042      	b.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aba:	d108      	bne.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003acc:	e01f      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d109      	bne.n	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003ae6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aec:	e00f      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003b06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b0c:	e012      	b.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003b0e:	e011      	b.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b10:	f7ff fe78 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	0b9b      	lsrs	r3, r3, #14
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	3301      	adds	r3, #1
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003b34:	bf00      	nop
    }
  }
  return (frequency);
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3734      	adds	r7, #52	; 0x34
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	08005094 	.word	0x08005094
 8003b44:	40021000 	.word	0x40021000
 8003b48:	007a1200 	.word	0x007a1200
 8003b4c:	003d0900 	.word	0x003d0900
 8003b50:	aaaaaaab 	.word	0xaaaaaaab

08003b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e041      	b.n	8003bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd f934 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f000 faaa 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e041      	b.n	8003c88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f839 	bl	8003c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fa5b 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x24>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e022      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d109      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x3e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e015      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d109      	bne.n	8003cfc <HAL_TIM_PWM_Start+0x58>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e008      	b.n	8003d0e <HAL_TIM_PWM_Start+0x6a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e05e      	b.n	8003dd4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x82>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	e013      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x92>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	e00b      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d44:	e003      	b.n	8003d4e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fc48 	bl	80045ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_TIM_PWM_Start+0x138>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_TIM_PWM_Start+0x138>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIM_PWM_Start+0xfa>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d009      	beq.n	8003d9e <HAL_TIM_PWM_Start+0xfa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_TIM_PWM_Start+0x13c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIM_PWM_Start+0xfa>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <HAL_TIM_PWM_Start+0x140>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d010      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	e007      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800

08003de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0ac      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	f200 809f 	bhi.w	8003f50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e12:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003f51 	.word	0x08003f51
 8003e20:	08003f51 	.word	0x08003f51
 8003e24:	08003f51 	.word	0x08003f51
 8003e28:	08003e8d 	.word	0x08003e8d
 8003e2c:	08003f51 	.word	0x08003f51
 8003e30:	08003f51 	.word	0x08003f51
 8003e34:	08003f51 	.word	0x08003f51
 8003e38:	08003ecf 	.word	0x08003ecf
 8003e3c:	08003f51 	.word	0x08003f51
 8003e40:	08003f51 	.word	0x08003f51
 8003e44:	08003f51 	.word	0x08003f51
 8003e48:	08003f0f 	.word	0x08003f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f9ac 	bl	80041b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	619a      	str	r2, [r3, #24]
      break;
 8003e8a:	e062      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f9f2 	bl	800427c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	619a      	str	r2, [r3, #24]
      break;
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fa3b 	bl	8004350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0208 	orr.w	r2, r2, #8
 8003ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0204 	bic.w	r2, r2, #4
 8003ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
      break;
 8003f0c:	e021      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fa85 	bl	8004424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	021a      	lsls	r2, r3, #8
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	61da      	str	r2, [r3, #28]
      break;
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b3      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x180>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd0>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	f000 8085 	beq.w	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa2>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x116>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xf6>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x136>
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x156>
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x156>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x156>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f000 faca 	bl	80045ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004028:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04e      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f000 fab3 	bl	80045ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03b      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fa2a 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	; 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa81 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004078:	e02b      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fa48 	bl	800451c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	; 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fa71 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004098:	e01b      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fa0a 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fa61 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00b      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fa58 	bl	800457a <TIM_ITRx_SetConfig>
        break;
 80040ca:	e002      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <TIM_Base_SetConfig+0xb8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <TIM_Base_SetConfig+0xbc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0x30>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a25      	ldr	r2, [pc, #148]	; (80041ac <TIM_Base_SetConfig+0xc0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <TIM_Base_SetConfig+0xb8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00b      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d007      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <TIM_Base_SetConfig+0xbc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <TIM_Base_SetConfig+0xc0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <TIM_Base_SetConfig+0xb8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d103      	bne.n	8004194 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	615a      	str	r2, [r3, #20]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800

080041b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f023 0302 	bic.w	r3, r3, #2
 80041f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <TIM_OC1_SetConfig+0xc8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10c      	bne.n	8004226 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0308 	bic.w	r3, r3, #8
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <TIM_OC1_SetConfig+0xc8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d111      	bne.n	8004252 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00

0800427c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0210 	bic.w	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0320 	bic.w	r3, r3, #32
 80042c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <TIM_OC2_SetConfig+0xd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10d      	bne.n	80042f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <TIM_OC2_SetConfig+0xd0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d113      	bne.n	8004328 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00

08004350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <TIM_OC3_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10d      	bne.n	80043ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <TIM_OC3_SetConfig+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d113      	bne.n	80043fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00

08004424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <TIM_OC4_SetConfig+0x98>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d109      	bne.n	8004498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	40012c00 	.word	0x40012c00

080044c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 030a 	bic.w	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0210 	bic.w	r2, r3, #16
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004558:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 0307 	orr.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	609a      	str	r2, [r3, #8]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e046      	b.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d009      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10c      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800

080046f0 <__errno>:
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <__errno+0x8>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000010 	.word	0x20000010

080046fc <__libc_init_array>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	2600      	movs	r6, #0
 8004700:	4d0c      	ldr	r5, [pc, #48]	; (8004734 <__libc_init_array+0x38>)
 8004702:	4c0d      	ldr	r4, [pc, #52]	; (8004738 <__libc_init_array+0x3c>)
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	42a6      	cmp	r6, r4
 800470a:	d109      	bne.n	8004720 <__libc_init_array+0x24>
 800470c:	f000 fc9c 	bl	8005048 <_init>
 8004710:	2600      	movs	r6, #0
 8004712:	4d0a      	ldr	r5, [pc, #40]	; (800473c <__libc_init_array+0x40>)
 8004714:	4c0a      	ldr	r4, [pc, #40]	; (8004740 <__libc_init_array+0x44>)
 8004716:	1b64      	subs	r4, r4, r5
 8004718:	10a4      	asrs	r4, r4, #2
 800471a:	42a6      	cmp	r6, r4
 800471c:	d105      	bne.n	800472a <__libc_init_array+0x2e>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f855 3b04 	ldr.w	r3, [r5], #4
 8004724:	4798      	blx	r3
 8004726:	3601      	adds	r6, #1
 8004728:	e7ee      	b.n	8004708 <__libc_init_array+0xc>
 800472a:	f855 3b04 	ldr.w	r3, [r5], #4
 800472e:	4798      	blx	r3
 8004730:	3601      	adds	r6, #1
 8004732:	e7f2      	b.n	800471a <__libc_init_array+0x1e>
 8004734:	08005108 	.word	0x08005108
 8004738:	08005108 	.word	0x08005108
 800473c:	08005108 	.word	0x08005108
 8004740:	0800510c 	.word	0x0800510c

08004744 <memset>:
 8004744:	4603      	mov	r3, r0
 8004746:	4402      	add	r2, r0
 8004748:	4293      	cmp	r3, r2
 800474a:	d100      	bne.n	800474e <memset+0xa>
 800474c:	4770      	bx	lr
 800474e:	f803 1b01 	strb.w	r1, [r3], #1
 8004752:	e7f9      	b.n	8004748 <memset+0x4>

08004754 <siprintf>:
 8004754:	b40e      	push	{r1, r2, r3}
 8004756:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800475a:	b500      	push	{lr}
 800475c:	b09c      	sub	sp, #112	; 0x70
 800475e:	ab1d      	add	r3, sp, #116	; 0x74
 8004760:	9002      	str	r0, [sp, #8]
 8004762:	9006      	str	r0, [sp, #24]
 8004764:	9107      	str	r1, [sp, #28]
 8004766:	9104      	str	r1, [sp, #16]
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <siprintf+0x38>)
 800476a:	4909      	ldr	r1, [pc, #36]	; (8004790 <siprintf+0x3c>)
 800476c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004770:	9105      	str	r1, [sp, #20]
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	a902      	add	r1, sp, #8
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	f000 f868 	bl	800484c <_svfiprintf_r>
 800477c:	2200      	movs	r2, #0
 800477e:	9b02      	ldr	r3, [sp, #8]
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	b01c      	add	sp, #112	; 0x70
 8004784:	f85d eb04 	ldr.w	lr, [sp], #4
 8004788:	b003      	add	sp, #12
 800478a:	4770      	bx	lr
 800478c:	20000010 	.word	0x20000010
 8004790:	ffff0208 	.word	0xffff0208

08004794 <__ssputs_r>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	688e      	ldr	r6, [r1, #8]
 800479a:	4682      	mov	sl, r0
 800479c:	429e      	cmp	r6, r3
 800479e:	460c      	mov	r4, r1
 80047a0:	4690      	mov	r8, r2
 80047a2:	461f      	mov	r7, r3
 80047a4:	d838      	bhi.n	8004818 <__ssputs_r+0x84>
 80047a6:	898a      	ldrh	r2, [r1, #12]
 80047a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047ac:	d032      	beq.n	8004814 <__ssputs_r+0x80>
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	6909      	ldr	r1, [r1, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	eba5 0901 	sub.w	r9, r5, r1
 80047b8:	6965      	ldr	r5, [r4, #20]
 80047ba:	444b      	add	r3, r9
 80047bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047c4:	106d      	asrs	r5, r5, #1
 80047c6:	429d      	cmp	r5, r3
 80047c8:	bf38      	it	cc
 80047ca:	461d      	movcc	r5, r3
 80047cc:	0553      	lsls	r3, r2, #21
 80047ce:	d531      	bpl.n	8004834 <__ssputs_r+0xa0>
 80047d0:	4629      	mov	r1, r5
 80047d2:	f000 fb6f 	bl	8004eb4 <_malloc_r>
 80047d6:	4606      	mov	r6, r0
 80047d8:	b950      	cbnz	r0, 80047f0 <__ssputs_r+0x5c>
 80047da:	230c      	movs	r3, #12
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	f8ca 3000 	str.w	r3, [sl]
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	464a      	mov	r2, r9
 80047f2:	6921      	ldr	r1, [r4, #16]
 80047f4:	f000 face 	bl	8004d94 <memcpy>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	6126      	str	r6, [r4, #16]
 8004806:	444e      	add	r6, r9
 8004808:	6026      	str	r6, [r4, #0]
 800480a:	463e      	mov	r6, r7
 800480c:	6165      	str	r5, [r4, #20]
 800480e:	eba5 0509 	sub.w	r5, r5, r9
 8004812:	60a5      	str	r5, [r4, #8]
 8004814:	42be      	cmp	r6, r7
 8004816:	d900      	bls.n	800481a <__ssputs_r+0x86>
 8004818:	463e      	mov	r6, r7
 800481a:	4632      	mov	r2, r6
 800481c:	4641      	mov	r1, r8
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	f000 fac6 	bl	8004db0 <memmove>
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	2000      	movs	r0, #0
 8004828:	1b9b      	subs	r3, r3, r6
 800482a:	60a3      	str	r3, [r4, #8]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	4433      	add	r3, r6
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	e7db      	b.n	80047ec <__ssputs_r+0x58>
 8004834:	462a      	mov	r2, r5
 8004836:	f000 fbb1 	bl	8004f9c <_realloc_r>
 800483a:	4606      	mov	r6, r0
 800483c:	2800      	cmp	r0, #0
 800483e:	d1e1      	bne.n	8004804 <__ssputs_r+0x70>
 8004840:	4650      	mov	r0, sl
 8004842:	6921      	ldr	r1, [r4, #16]
 8004844:	f000 face 	bl	8004de4 <_free_r>
 8004848:	e7c7      	b.n	80047da <__ssputs_r+0x46>
	...

0800484c <_svfiprintf_r>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	4698      	mov	r8, r3
 8004852:	898b      	ldrh	r3, [r1, #12]
 8004854:	4607      	mov	r7, r0
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	460d      	mov	r5, r1
 800485a:	4614      	mov	r4, r2
 800485c:	b09d      	sub	sp, #116	; 0x74
 800485e:	d50e      	bpl.n	800487e <_svfiprintf_r+0x32>
 8004860:	690b      	ldr	r3, [r1, #16]
 8004862:	b963      	cbnz	r3, 800487e <_svfiprintf_r+0x32>
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	f000 fb25 	bl	8004eb4 <_malloc_r>
 800486a:	6028      	str	r0, [r5, #0]
 800486c:	6128      	str	r0, [r5, #16]
 800486e:	b920      	cbnz	r0, 800487a <_svfiprintf_r+0x2e>
 8004870:	230c      	movs	r3, #12
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e0d1      	b.n	8004a1e <_svfiprintf_r+0x1d2>
 800487a:	2340      	movs	r3, #64	; 0x40
 800487c:	616b      	str	r3, [r5, #20]
 800487e:	2300      	movs	r3, #0
 8004880:	9309      	str	r3, [sp, #36]	; 0x24
 8004882:	2320      	movs	r3, #32
 8004884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004888:	2330      	movs	r3, #48	; 0x30
 800488a:	f04f 0901 	mov.w	r9, #1
 800488e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004892:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a38 <_svfiprintf_r+0x1ec>
 8004896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800489a:	4623      	mov	r3, r4
 800489c:	469a      	mov	sl, r3
 800489e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a2:	b10a      	cbz	r2, 80048a8 <_svfiprintf_r+0x5c>
 80048a4:	2a25      	cmp	r2, #37	; 0x25
 80048a6:	d1f9      	bne.n	800489c <_svfiprintf_r+0x50>
 80048a8:	ebba 0b04 	subs.w	fp, sl, r4
 80048ac:	d00b      	beq.n	80048c6 <_svfiprintf_r+0x7a>
 80048ae:	465b      	mov	r3, fp
 80048b0:	4622      	mov	r2, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	4638      	mov	r0, r7
 80048b6:	f7ff ff6d 	bl	8004794 <__ssputs_r>
 80048ba:	3001      	adds	r0, #1
 80048bc:	f000 80aa 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c2:	445a      	add	r2, fp
 80048c4:	9209      	str	r2, [sp, #36]	; 0x24
 80048c6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a2 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048da:	f10a 0a01 	add.w	sl, sl, #1
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	9307      	str	r3, [sp, #28]
 80048e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e6:	931a      	str	r3, [sp, #104]	; 0x68
 80048e8:	4654      	mov	r4, sl
 80048ea:	2205      	movs	r2, #5
 80048ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f0:	4851      	ldr	r0, [pc, #324]	; (8004a38 <_svfiprintf_r+0x1ec>)
 80048f2:	f000 fa41 	bl	8004d78 <memchr>
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	b9d8      	cbnz	r0, 8004932 <_svfiprintf_r+0xe6>
 80048fa:	06d0      	lsls	r0, r2, #27
 80048fc:	bf44      	itt	mi
 80048fe:	2320      	movmi	r3, #32
 8004900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004904:	0711      	lsls	r1, r2, #28
 8004906:	bf44      	itt	mi
 8004908:	232b      	movmi	r3, #43	; 0x2b
 800490a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b2a      	cmp	r3, #42	; 0x2a
 8004914:	d015      	beq.n	8004942 <_svfiprintf_r+0xf6>
 8004916:	4654      	mov	r4, sl
 8004918:	2000      	movs	r0, #0
 800491a:	f04f 0c0a 	mov.w	ip, #10
 800491e:	9a07      	ldr	r2, [sp, #28]
 8004920:	4621      	mov	r1, r4
 8004922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004926:	3b30      	subs	r3, #48	; 0x30
 8004928:	2b09      	cmp	r3, #9
 800492a:	d94e      	bls.n	80049ca <_svfiprintf_r+0x17e>
 800492c:	b1b0      	cbz	r0, 800495c <_svfiprintf_r+0x110>
 800492e:	9207      	str	r2, [sp, #28]
 8004930:	e014      	b.n	800495c <_svfiprintf_r+0x110>
 8004932:	eba0 0308 	sub.w	r3, r0, r8
 8004936:	fa09 f303 	lsl.w	r3, r9, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	46a2      	mov	sl, r4
 800493e:	9304      	str	r3, [sp, #16]
 8004940:	e7d2      	b.n	80048e8 <_svfiprintf_r+0x9c>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	1d19      	adds	r1, r3, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbb      	ittet	lt
 800494e:	425b      	neglt	r3, r3
 8004950:	f042 0202 	orrlt.w	r2, r2, #2
 8004954:	9307      	strge	r3, [sp, #28]
 8004956:	9307      	strlt	r3, [sp, #28]
 8004958:	bfb8      	it	lt
 800495a:	9204      	strlt	r2, [sp, #16]
 800495c:	7823      	ldrb	r3, [r4, #0]
 800495e:	2b2e      	cmp	r3, #46	; 0x2e
 8004960:	d10c      	bne.n	800497c <_svfiprintf_r+0x130>
 8004962:	7863      	ldrb	r3, [r4, #1]
 8004964:	2b2a      	cmp	r3, #42	; 0x2a
 8004966:	d135      	bne.n	80049d4 <_svfiprintf_r+0x188>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	3402      	adds	r4, #2
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	9203      	str	r2, [sp, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfb8      	it	lt
 8004976:	f04f 33ff 	movlt.w	r3, #4294967295
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a3c <_svfiprintf_r+0x1f0>
 8004980:	2203      	movs	r2, #3
 8004982:	4650      	mov	r0, sl
 8004984:	7821      	ldrb	r1, [r4, #0]
 8004986:	f000 f9f7 	bl	8004d78 <memchr>
 800498a:	b140      	cbz	r0, 800499e <_svfiprintf_r+0x152>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	eba0 000a 	sub.w	r0, r0, sl
 8004992:	fa03 f000 	lsl.w	r0, r3, r0
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	3401      	adds	r4, #1
 800499a:	4303      	orrs	r3, r0
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	2206      	movs	r2, #6
 80049a4:	4826      	ldr	r0, [pc, #152]	; (8004a40 <_svfiprintf_r+0x1f4>)
 80049a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049aa:	f000 f9e5 	bl	8004d78 <memchr>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d038      	beq.n	8004a24 <_svfiprintf_r+0x1d8>
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <_svfiprintf_r+0x1f8>)
 80049b4:	bb1b      	cbnz	r3, 80049fe <_svfiprintf_r+0x1b2>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3307      	adds	r3, #7
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	3308      	adds	r3, #8
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c4:	4433      	add	r3, r6
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	e767      	b.n	800489a <_svfiprintf_r+0x4e>
 80049ca:	460c      	mov	r4, r1
 80049cc:	2001      	movs	r0, #1
 80049ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80049d2:	e7a5      	b.n	8004920 <_svfiprintf_r+0xd4>
 80049d4:	2300      	movs	r3, #0
 80049d6:	f04f 0c0a 	mov.w	ip, #10
 80049da:	4619      	mov	r1, r3
 80049dc:	3401      	adds	r4, #1
 80049de:	9305      	str	r3, [sp, #20]
 80049e0:	4620      	mov	r0, r4
 80049e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e6:	3a30      	subs	r2, #48	; 0x30
 80049e8:	2a09      	cmp	r2, #9
 80049ea:	d903      	bls.n	80049f4 <_svfiprintf_r+0x1a8>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0c5      	beq.n	800497c <_svfiprintf_r+0x130>
 80049f0:	9105      	str	r1, [sp, #20]
 80049f2:	e7c3      	b.n	800497c <_svfiprintf_r+0x130>
 80049f4:	4604      	mov	r4, r0
 80049f6:	2301      	movs	r3, #1
 80049f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049fc:	e7f0      	b.n	80049e0 <_svfiprintf_r+0x194>
 80049fe:	ab03      	add	r3, sp, #12
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	462a      	mov	r2, r5
 8004a04:	4638      	mov	r0, r7
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <_svfiprintf_r+0x1fc>)
 8004a08:	a904      	add	r1, sp, #16
 8004a0a:	f3af 8000 	nop.w
 8004a0e:	1c42      	adds	r2, r0, #1
 8004a10:	4606      	mov	r6, r0
 8004a12:	d1d6      	bne.n	80049c2 <_svfiprintf_r+0x176>
 8004a14:	89ab      	ldrh	r3, [r5, #12]
 8004a16:	065b      	lsls	r3, r3, #25
 8004a18:	f53f af2c 	bmi.w	8004874 <_svfiprintf_r+0x28>
 8004a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1e:	b01d      	add	sp, #116	; 0x74
 8004a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <_svfiprintf_r+0x1fc>)
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	f000 f87c 	bl	8004b2c <_printf_i>
 8004a34:	e7eb      	b.n	8004a0e <_svfiprintf_r+0x1c2>
 8004a36:	bf00      	nop
 8004a38:	080050d5 	.word	0x080050d5
 8004a3c:	080050db 	.word	0x080050db
 8004a40:	080050df 	.word	0x080050df
 8004a44:	00000000 	.word	0x00000000
 8004a48:	08004795 	.word	0x08004795

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4616      	mov	r6, r2
 8004a52:	4699      	mov	r9, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	4607      	mov	r7, r0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bfb8      	it	lt
 8004a5e:	4613      	movlt	r3, r2
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a66:	460c      	mov	r4, r1
 8004a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a6c:	b10a      	cbz	r2, 8004a72 <_printf_common+0x26>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	6833      	ldrmi	r3, [r6, #0]
 8004a7a:	3302      	addmi	r3, #2
 8004a7c:	6033      	strmi	r3, [r6, #0]
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	f015 0506 	ands.w	r5, r5, #6
 8004a84:	d106      	bne.n	8004a94 <_printf_common+0x48>
 8004a86:	f104 0a19 	add.w	sl, r4, #25
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	6832      	ldr	r2, [r6, #0]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dc28      	bgt.n	8004ae6 <_printf_common+0x9a>
 8004a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a98:	1e13      	subs	r3, r2, #0
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	bf18      	it	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	0692      	lsls	r2, r2, #26
 8004aa2:	d42d      	bmi.n	8004b00 <_printf_common+0xb4>
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d020      	beq.n	8004af4 <_printf_common+0xa8>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	68e5      	ldr	r5, [r4, #12]
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	bf18      	it	ne
 8004abe:	2500      	movne	r5, #0
 8004ac0:	6832      	ldr	r2, [r6, #0]
 8004ac2:	f04f 0600 	mov.w	r6, #0
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	bf08      	it	eq
 8004aca:	1aad      	subeq	r5, r5, r2
 8004acc:	6922      	ldr	r2, [r4, #16]
 8004ace:	bf08      	it	eq
 8004ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	bfc4      	itt	gt
 8004ad8:	1a9b      	subgt	r3, r3, r2
 8004ada:	18ed      	addgt	r5, r5, r3
 8004adc:	341a      	adds	r4, #26
 8004ade:	42b5      	cmp	r5, r6
 8004ae0:	d11a      	bne.n	8004b18 <_printf_common+0xcc>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e008      	b.n	8004af8 <_printf_common+0xac>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4652      	mov	r2, sl
 8004aea:	4649      	mov	r1, r9
 8004aec:	4638      	mov	r0, r7
 8004aee:	47c0      	blx	r8
 8004af0:	3001      	adds	r0, #1
 8004af2:	d103      	bne.n	8004afc <_printf_common+0xb0>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7c4      	b.n	8004a8a <_printf_common+0x3e>
 8004b00:	2030      	movs	r0, #48	; 0x30
 8004b02:	18e1      	adds	r1, r4, r3
 8004b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0e:	4422      	add	r2, r4
 8004b10:	3302      	adds	r3, #2
 8004b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b16:	e7c5      	b.n	8004aa4 <_printf_common+0x58>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0e6      	beq.n	8004af4 <_printf_common+0xa8>
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7d9      	b.n	8004ade <_printf_common+0x92>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	7e0f      	ldrb	r7, [r1, #24]
 8004b32:	4691      	mov	r9, r2
 8004b34:	2f78      	cmp	r7, #120	; 0x78
 8004b36:	4680      	mov	r8, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	469a      	mov	sl, r3
 8004b3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b42:	d807      	bhi.n	8004b54 <_printf_i+0x28>
 8004b44:	2f62      	cmp	r7, #98	; 0x62
 8004b46:	d80a      	bhi.n	8004b5e <_printf_i+0x32>
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	f000 80d9 	beq.w	8004d00 <_printf_i+0x1d4>
 8004b4e:	2f58      	cmp	r7, #88	; 0x58
 8004b50:	f000 80a4 	beq.w	8004c9c <_printf_i+0x170>
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b5c:	e03a      	b.n	8004bd4 <_printf_i+0xa8>
 8004b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b62:	2b15      	cmp	r3, #21
 8004b64:	d8f6      	bhi.n	8004b54 <_printf_i+0x28>
 8004b66:	a101      	add	r1, pc, #4	; (adr r1, 8004b6c <_printf_i+0x40>)
 8004b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004b55 	.word	0x08004b55
 8004b78:	08004b55 	.word	0x08004b55
 8004b7c:	08004b55 	.word	0x08004b55
 8004b80:	08004b55 	.word	0x08004b55
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b55 	.word	0x08004b55
 8004b8c:	08004b55 	.word	0x08004b55
 8004b90:	08004b55 	.word	0x08004b55
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08004ce7 	.word	0x08004ce7
 8004b9c:	08004c09 	.word	0x08004c09
 8004ba0:	08004cc9 	.word	0x08004cc9
 8004ba4:	08004b55 	.word	0x08004b55
 8004ba8:	08004b55 	.word	0x08004b55
 8004bac:	08004d09 	.word	0x08004d09
 8004bb0:	08004b55 	.word	0x08004b55
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b55 	.word	0x08004b55
 8004bbc:	08004b55 	.word	0x08004b55
 8004bc0:	08004cd1 	.word	0x08004cd1
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0a4      	b.n	8004d22 <_printf_i+0x1f6>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	6829      	ldr	r1, [r5, #0]
 8004bdc:	0606      	lsls	r6, r0, #24
 8004bde:	f101 0304 	add.w	r3, r1, #4
 8004be2:	d50a      	bpl.n	8004bfa <_printf_i+0xce>
 8004be4:	680e      	ldr	r6, [r1, #0]
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	da03      	bge.n	8004bf4 <_printf_i+0xc8>
 8004bec:	232d      	movs	r3, #45	; 0x2d
 8004bee:	4276      	negs	r6, r6
 8004bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	485e      	ldr	r0, [pc, #376]	; (8004d70 <_printf_i+0x244>)
 8004bf8:	e019      	b.n	8004c2e <_printf_i+0x102>
 8004bfa:	680e      	ldr	r6, [r1, #0]
 8004bfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	bf18      	it	ne
 8004c04:	b236      	sxthne	r6, r6
 8004c06:	e7ef      	b.n	8004be8 <_printf_i+0xbc>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1d19      	adds	r1, r3, #4
 8004c0e:	6029      	str	r1, [r5, #0]
 8004c10:	0601      	lsls	r1, r0, #24
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0xec>
 8004c14:	681e      	ldr	r6, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <_printf_i+0xf2>
 8004c18:	0646      	lsls	r6, r0, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0xe8>
 8004c1c:	881e      	ldrh	r6, [r3, #0]
 8004c1e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c20:	bf0c      	ite	eq
 8004c22:	2308      	moveq	r3, #8
 8004c24:	230a      	movne	r3, #10
 8004c26:	4852      	ldr	r0, [pc, #328]	; (8004d70 <_printf_i+0x244>)
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2e:	6865      	ldr	r5, [r4, #4]
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	bfa8      	it	ge
 8004c34:	6821      	ldrge	r1, [r4, #0]
 8004c36:	60a5      	str	r5, [r4, #8]
 8004c38:	bfa4      	itt	ge
 8004c3a:	f021 0104 	bicge.w	r1, r1, #4
 8004c3e:	6021      	strge	r1, [r4, #0]
 8004c40:	b90e      	cbnz	r6, 8004c46 <_printf_i+0x11a>
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	d04d      	beq.n	8004ce2 <_printf_i+0x1b6>
 8004c46:	4615      	mov	r5, r2
 8004c48:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c4c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c50:	5dc7      	ldrb	r7, [r0, r7]
 8004c52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c56:	4637      	mov	r7, r6
 8004c58:	42bb      	cmp	r3, r7
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	d9f4      	bls.n	8004c48 <_printf_i+0x11c>
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d10b      	bne.n	8004c7a <_printf_i+0x14e>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	07de      	lsls	r6, r3, #31
 8004c66:	d508      	bpl.n	8004c7a <_printf_i+0x14e>
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	6861      	ldr	r1, [r4, #4]
 8004c6c:	4299      	cmp	r1, r3
 8004c6e:	bfde      	ittt	le
 8004c70:	2330      	movle	r3, #48	; 0x30
 8004c72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c7a:	1b52      	subs	r2, r2, r5
 8004c7c:	6122      	str	r2, [r4, #16]
 8004c7e:	464b      	mov	r3, r9
 8004c80:	4621      	mov	r1, r4
 8004c82:	4640      	mov	r0, r8
 8004c84:	f8cd a000 	str.w	sl, [sp]
 8004c88:	aa03      	add	r2, sp, #12
 8004c8a:	f7ff fedf 	bl	8004a4c <_printf_common>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d14c      	bne.n	8004d2c <_printf_i+0x200>
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	b004      	add	sp, #16
 8004c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9c:	4834      	ldr	r0, [pc, #208]	; (8004d70 <_printf_i+0x244>)
 8004c9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ca2:	6829      	ldr	r1, [r5, #0]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004caa:	6029      	str	r1, [r5, #0]
 8004cac:	061d      	lsls	r5, r3, #24
 8004cae:	d514      	bpl.n	8004cda <_printf_i+0x1ae>
 8004cb0:	07df      	lsls	r7, r3, #31
 8004cb2:	bf44      	itt	mi
 8004cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb8:	6023      	strmi	r3, [r4, #0]
 8004cba:	b91e      	cbnz	r6, 8004cc4 <_printf_i+0x198>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	e7af      	b.n	8004c28 <_printf_i+0xfc>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f043 0320 	orr.w	r3, r3, #32
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	2378      	movs	r3, #120	; 0x78
 8004cd2:	4828      	ldr	r0, [pc, #160]	; (8004d74 <_printf_i+0x248>)
 8004cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cd8:	e7e3      	b.n	8004ca2 <_printf_i+0x176>
 8004cda:	0659      	lsls	r1, r3, #25
 8004cdc:	bf48      	it	mi
 8004cde:	b2b6      	uxthmi	r6, r6
 8004ce0:	e7e6      	b.n	8004cb0 <_printf_i+0x184>
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	e7bb      	b.n	8004c5e <_printf_i+0x132>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	6826      	ldr	r6, [r4, #0]
 8004cea:	1d18      	adds	r0, r3, #4
 8004cec:	6961      	ldr	r1, [r4, #20]
 8004cee:	6028      	str	r0, [r5, #0]
 8004cf0:	0635      	lsls	r5, r6, #24
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	d501      	bpl.n	8004cfa <_printf_i+0x1ce>
 8004cf6:	6019      	str	r1, [r3, #0]
 8004cf8:	e002      	b.n	8004d00 <_printf_i+0x1d4>
 8004cfa:	0670      	lsls	r0, r6, #25
 8004cfc:	d5fb      	bpl.n	8004cf6 <_printf_i+0x1ca>
 8004cfe:	8019      	strh	r1, [r3, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	4615      	mov	r5, r2
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	e7ba      	b.n	8004c7e <_printf_i+0x152>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f82f 	bl	8004d78 <memchr>
 8004d1a:	b108      	cbz	r0, 8004d20 <_printf_i+0x1f4>
 8004d1c:	1b40      	subs	r0, r0, r5
 8004d1e:	6060      	str	r0, [r4, #4]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	2300      	movs	r3, #0
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2a:	e7a8      	b.n	8004c7e <_printf_i+0x152>
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	47d0      	blx	sl
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0ab      	beq.n	8004c92 <_printf_i+0x166>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	079b      	lsls	r3, r3, #30
 8004d3e:	d413      	bmi.n	8004d68 <_printf_i+0x23c>
 8004d40:	68e0      	ldr	r0, [r4, #12]
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	4298      	cmp	r0, r3
 8004d46:	bfb8      	it	lt
 8004d48:	4618      	movlt	r0, r3
 8004d4a:	e7a4      	b.n	8004c96 <_printf_i+0x16a>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4632      	mov	r2, r6
 8004d50:	4649      	mov	r1, r9
 8004d52:	4640      	mov	r0, r8
 8004d54:	47d0      	blx	sl
 8004d56:	3001      	adds	r0, #1
 8004d58:	d09b      	beq.n	8004c92 <_printf_i+0x166>
 8004d5a:	3501      	adds	r5, #1
 8004d5c:	68e3      	ldr	r3, [r4, #12]
 8004d5e:	9903      	ldr	r1, [sp, #12]
 8004d60:	1a5b      	subs	r3, r3, r1
 8004d62:	42ab      	cmp	r3, r5
 8004d64:	dcf2      	bgt.n	8004d4c <_printf_i+0x220>
 8004d66:	e7eb      	b.n	8004d40 <_printf_i+0x214>
 8004d68:	2500      	movs	r5, #0
 8004d6a:	f104 0619 	add.w	r6, r4, #25
 8004d6e:	e7f5      	b.n	8004d5c <_printf_i+0x230>
 8004d70:	080050e6 	.word	0x080050e6
 8004d74:	080050f7 	.word	0x080050f7

08004d78 <memchr>:
 8004d78:	4603      	mov	r3, r0
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	b2c9      	uxtb	r1, r1
 8004d7e:	4402      	add	r2, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	d101      	bne.n	8004d8a <memchr+0x12>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e003      	b.n	8004d92 <memchr+0x1a>
 8004d8a:	7804      	ldrb	r4, [r0, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	428c      	cmp	r4, r1
 8004d90:	d1f6      	bne.n	8004d80 <memchr+0x8>
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <memcpy>:
 8004d94:	440a      	add	r2, r1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d9c:	d100      	bne.n	8004da0 <memcpy+0xc>
 8004d9e:	4770      	bx	lr
 8004da0:	b510      	push	{r4, lr}
 8004da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da6:	4291      	cmp	r1, r2
 8004da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dac:	d1f9      	bne.n	8004da2 <memcpy+0xe>
 8004dae:	bd10      	pop	{r4, pc}

08004db0 <memmove>:
 8004db0:	4288      	cmp	r0, r1
 8004db2:	b510      	push	{r4, lr}
 8004db4:	eb01 0402 	add.w	r4, r1, r2
 8004db8:	d902      	bls.n	8004dc0 <memmove+0x10>
 8004dba:	4284      	cmp	r4, r0
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	d807      	bhi.n	8004dd0 <memmove+0x20>
 8004dc0:	1e43      	subs	r3, r0, #1
 8004dc2:	42a1      	cmp	r1, r4
 8004dc4:	d008      	beq.n	8004dd8 <memmove+0x28>
 8004dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dce:	e7f8      	b.n	8004dc2 <memmove+0x12>
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	4402      	add	r2, r0
 8004dd4:	428a      	cmp	r2, r1
 8004dd6:	d100      	bne.n	8004dda <memmove+0x2a>
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004de2:	e7f7      	b.n	8004dd4 <memmove+0x24>

08004de4 <_free_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4605      	mov	r5, r0
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d040      	beq.n	8004e6e <_free_r+0x8a>
 8004dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df0:	1f0c      	subs	r4, r1, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bfb8      	it	lt
 8004df6:	18e4      	addlt	r4, r4, r3
 8004df8:	f000 f910 	bl	800501c <__malloc_lock>
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <_free_r+0x8c>)
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	b933      	cbnz	r3, 8004e10 <_free_r+0x2c>
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6014      	str	r4, [r2, #0]
 8004e06:	4628      	mov	r0, r5
 8004e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e0c:	f000 b90c 	b.w	8005028 <__malloc_unlock>
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d908      	bls.n	8004e26 <_free_r+0x42>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	1821      	adds	r1, r4, r0
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf01      	itttt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	1809      	addeq	r1, r1, r0
 8004e22:	6021      	streq	r1, [r4, #0]
 8004e24:	e7ed      	b.n	8004e02 <_free_r+0x1e>
 8004e26:	461a      	mov	r2, r3
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b10b      	cbz	r3, 8004e30 <_free_r+0x4c>
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d9fa      	bls.n	8004e26 <_free_r+0x42>
 8004e30:	6811      	ldr	r1, [r2, #0]
 8004e32:	1850      	adds	r0, r2, r1
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	d10b      	bne.n	8004e50 <_free_r+0x6c>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	4401      	add	r1, r0
 8004e3c:	1850      	adds	r0, r2, r1
 8004e3e:	4283      	cmp	r3, r0
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	d1e0      	bne.n	8004e06 <_free_r+0x22>
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4401      	add	r1, r0
 8004e4a:	6011      	str	r1, [r2, #0]
 8004e4c:	6053      	str	r3, [r2, #4]
 8004e4e:	e7da      	b.n	8004e06 <_free_r+0x22>
 8004e50:	d902      	bls.n	8004e58 <_free_r+0x74>
 8004e52:	230c      	movs	r3, #12
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	e7d6      	b.n	8004e06 <_free_r+0x22>
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	1821      	adds	r1, r4, r0
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf01      	itttt	eq
 8004e60:	6819      	ldreq	r1, [r3, #0]
 8004e62:	685b      	ldreq	r3, [r3, #4]
 8004e64:	1809      	addeq	r1, r1, r0
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	6063      	str	r3, [r4, #4]
 8004e6a:	6054      	str	r4, [r2, #4]
 8004e6c:	e7cb      	b.n	8004e06 <_free_r+0x22>
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	200001d4 	.word	0x200001d4

08004e74 <sbrk_aligned>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <sbrk_aligned+0x3c>)
 8004e78:	460c      	mov	r4, r1
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b911      	cbnz	r1, 8004e86 <sbrk_aligned+0x12>
 8004e80:	f000 f8bc 	bl	8004ffc <_sbrk_r>
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 f8b7 	bl	8004ffc <_sbrk_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <sbrk_aligned+0x34>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d007      	beq.n	8004eac <sbrk_aligned+0x38>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f8ac 	bl	8004ffc <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d101      	bne.n	8004eac <sbrk_aligned+0x38>
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	200001d8 	.word	0x200001d8

08004eb4 <_malloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d905      	bls.n	8004edc <_malloc_r+0x28>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	4e2e      	ldr	r6, [pc, #184]	; (8004f98 <_malloc_r+0xe4>)
 8004ede:	f000 f89d 	bl	800501c <__malloc_lock>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	bb34      	cbnz	r4, 8004f36 <_malloc_r+0x82>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff ffc2 	bl	8004e74 <sbrk_aligned>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d14d      	bne.n	8004f92 <_malloc_r+0xde>
 8004ef6:	6834      	ldr	r4, [r6, #0]
 8004ef8:	4626      	mov	r6, r4
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d140      	bne.n	8004f80 <_malloc_r+0xcc>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4631      	mov	r1, r6
 8004f02:	4638      	mov	r0, r7
 8004f04:	eb04 0803 	add.w	r8, r4, r3
 8004f08:	f000 f878 	bl	8004ffc <_sbrk_r>
 8004f0c:	4580      	cmp	r8, r0
 8004f0e:	d13a      	bne.n	8004f86 <_malloc_r+0xd2>
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	3503      	adds	r5, #3
 8004f14:	1a6d      	subs	r5, r5, r1
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	4638      	mov	r0, r7
 8004f24:	4629      	mov	r1, r5
 8004f26:	f7ff ffa5 	bl	8004e74 <sbrk_aligned>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d02b      	beq.n	8004f86 <_malloc_r+0xd2>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	442b      	add	r3, r5
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	e00e      	b.n	8004f54 <_malloc_r+0xa0>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	1b52      	subs	r2, r2, r5
 8004f3a:	d41e      	bmi.n	8004f7a <_malloc_r+0xc6>
 8004f3c:	2a0b      	cmp	r2, #11
 8004f3e:	d916      	bls.n	8004f6e <_malloc_r+0xba>
 8004f40:	1961      	adds	r1, r4, r5
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	6025      	str	r5, [r4, #0]
 8004f46:	bf18      	it	ne
 8004f48:	6059      	strne	r1, [r3, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	bf08      	it	eq
 8004f4e:	6031      	streq	r1, [r6, #0]
 8004f50:	5162      	str	r2, [r4, r5]
 8004f52:	604b      	str	r3, [r1, #4]
 8004f54:	4638      	mov	r0, r7
 8004f56:	f104 060b 	add.w	r6, r4, #11
 8004f5a:	f000 f865 	bl	8005028 <__malloc_unlock>
 8004f5e:	f026 0607 	bic.w	r6, r6, #7
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	1af2      	subs	r2, r6, r3
 8004f66:	d0b6      	beq.n	8004ed6 <_malloc_r+0x22>
 8004f68:	1b9b      	subs	r3, r3, r6
 8004f6a:	50a3      	str	r3, [r4, r2]
 8004f6c:	e7b3      	b.n	8004ed6 <_malloc_r+0x22>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	bf0c      	ite	eq
 8004f74:	6032      	streq	r2, [r6, #0]
 8004f76:	605a      	strne	r2, [r3, #4]
 8004f78:	e7ec      	b.n	8004f54 <_malloc_r+0xa0>
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	6864      	ldr	r4, [r4, #4]
 8004f7e:	e7b2      	b.n	8004ee6 <_malloc_r+0x32>
 8004f80:	4634      	mov	r4, r6
 8004f82:	6876      	ldr	r6, [r6, #4]
 8004f84:	e7b9      	b.n	8004efa <_malloc_r+0x46>
 8004f86:	230c      	movs	r3, #12
 8004f88:	4638      	mov	r0, r7
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	f000 f84c 	bl	8005028 <__malloc_unlock>
 8004f90:	e7a1      	b.n	8004ed6 <_malloc_r+0x22>
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	e7de      	b.n	8004f54 <_malloc_r+0xa0>
 8004f96:	bf00      	nop
 8004f98:	200001d4 	.word	0x200001d4

08004f9c <_realloc_r>:
 8004f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	460e      	mov	r6, r1
 8004fa6:	b921      	cbnz	r1, 8004fb2 <_realloc_r+0x16>
 8004fa8:	4611      	mov	r1, r2
 8004faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fae:	f7ff bf81 	b.w	8004eb4 <_malloc_r>
 8004fb2:	b92a      	cbnz	r2, 8004fc0 <_realloc_r+0x24>
 8004fb4:	f7ff ff16 	bl	8004de4 <_free_r>
 8004fb8:	4625      	mov	r5, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc0:	f000 f838 	bl	8005034 <_malloc_usable_size_r>
 8004fc4:	4284      	cmp	r4, r0
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	d802      	bhi.n	8004fd0 <_realloc_r+0x34>
 8004fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fce:	d812      	bhi.n	8004ff6 <_realloc_r+0x5a>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff ff6e 	bl	8004eb4 <_malloc_r>
 8004fd8:	4605      	mov	r5, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d0ed      	beq.n	8004fba <_realloc_r+0x1e>
 8004fde:	42bc      	cmp	r4, r7
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	bf28      	it	cs
 8004fe6:	463a      	movcs	r2, r7
 8004fe8:	f7ff fed4 	bl	8004d94 <memcpy>
 8004fec:	4631      	mov	r1, r6
 8004fee:	4640      	mov	r0, r8
 8004ff0:	f7ff fef8 	bl	8004de4 <_free_r>
 8004ff4:	e7e1      	b.n	8004fba <_realloc_r+0x1e>
 8004ff6:	4635      	mov	r5, r6
 8004ff8:	e7df      	b.n	8004fba <_realloc_r+0x1e>
	...

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	2300      	movs	r3, #0
 8005000:	4d05      	ldr	r5, [pc, #20]	; (8005018 <_sbrk_r+0x1c>)
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fb ff72 	bl	8000ef0 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200001dc 	.word	0x200001dc

0800501c <__malloc_lock>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__malloc_lock+0x8>)
 800501e:	f000 b811 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	200001e0 	.word	0x200001e0

08005028 <__malloc_unlock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_unlock+0x8>)
 800502a:	f000 b80c 	b.w	8005046 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	200001e0 	.word	0x200001e0

08005034 <_malloc_usable_size_r>:
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f18      	subs	r0, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfbc      	itt	lt
 800503e:	580b      	ldrlt	r3, [r1, r0]
 8005040:	18c0      	addlt	r0, r0, r3
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_acquire_recursive>:
 8005044:	4770      	bx	lr

08005046 <__retarget_lock_release_recursive>:
 8005046:	4770      	bx	lr

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
